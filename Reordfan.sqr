!----------------------------------------------------------------
!  FILENAME     : Reordfan.sqr
!  AUTHOR       : Andrew Bratton (Thanks to Alan Stevens (BPD Consulting Ltd))
!  DATE         : 29/09/2001
!----------------------------------------------------------------
!  DESCRIPTION  : Fast track and Engineering Contract Items Reorder Report
!----------------------------------------------------------------
!  MODIFICATION   HISTORY
!  DATE           INITIALS      NOTES
!  03/01/2002     AS            Added include file Input.h as requested, therefore needed to $Schema to
!                               prefix the tables
!
!  22/04/2002     BH            Amended the program to look at all entries in the INVENTORY table for the warehouse
!                               entered. Only STK and non outside items are included. The program then works out
!                               how many items are on an outstanding PR, PO or reserved on a workorder. It then
!                               checks to see If CURBAL - Qty reserved on workorders is less then MINLEVEL (This
!                               has got to be > zero. It then uses the following calculation to work out the
!                               reorder quantity.
!                               MAXLEVEL - QTY on PR - QTY on PO - CURBAL + QTY reserved on Workorders.
!
!                               2 extra variables have been added to MAXVARS PURCH_GROUP,REORDER_WONUM
!                               BASECURRENCY1 is used for the default currency
!
!                               Glcontrolacc is got frpm locations for the warehouse
!                               Internal contact & phone number are got from labor for the user running report
!
!                               The program creates WAPPR PR's for each vendor to be ordered for. The section to
!                               create PO's is not called at present. This includes the UPD_TOTAL and UPDATE
!                               procedures
!
!                               The price used is the LASTCOST unless there is a current price agreement. If there
!                               is the unit price is used from it. The agreement number and PA number are
!                               printed on the report
!   12/8/2002     APC           Added inspection required flag to be transferred
!
!   17/09/2002    BH            Changed the search on PR,PO and Workorder to use maxvalue of status from valuelist
!
!   12/03/2003    CAA           Included column for inspection items, prints Y If receiptscomplete = N,
!                               inspectionrequired = Y and status not COMP or CLOSE.
!
!   12/03/2003    CAA           Amended WO_Check and initialise prqty to zero.
!
!   28/01/2004    CAA           USE PRICE AGREEMENTS THAT ARE APPROVED OR Print STATUS ONLY - REMEDY 000452195 (same as REMEDY 000450935)
!
!   18/02/2004    CAA           Remedy 000454667 - calculate tax fro line) and REMEDY 000452195
!                               (get latest price agreement number as INVENTORY.il1 is not always updated)
!   26/02/2004    JM            Make sure that the exchangerate is always set to 1 for GBP PRs
!   24/03/2004    CAA           Add prompt and search for ROI, ROR or Both, Remedy Call 000459289
!   24/03/2004    CAA           Add column in4 (respnsile person) Remedy - 000460302 (Printed where PANUM used to be printed)
!   17/05/2004    JM            Stock Type of WASTE has been added to Maximo as part of WS157. These items are similar
!                               to REDSTK in that they should not be reordered but they can be issued until the existing stock
!                               has been used.
!   30/07/2004    CAA           Remedy Call 000476963 (added in19 column to report)
!   23/11/2004    RC            Changed to use IN15 instead of IN12 field.
!   24/11/2004    RC            Now takes into account Conversion factors.
!   02/12/2004    RC            Fixed a number of bugs.
!   10/12/2004    RC            Change line 1291 Change to stop multiple printing.
!   27/01/2005    RC            Added ability to look at more than one storeroom
!   03/10/2005    A Newman      Remedy 43719 - Change Max to Min for required delivery dates
!   01/09/2006    N Rhodes      Remedy 80005 - Added tax amount to loaded cost on POLINE to fix header cost
!   16/09/2007    R Nunn        Remedy 152666 - Add Item Criticality column C'to report and remove 'CB' from report
!   19/09/2007    R Nunn        Remedy 176424 - Add Payment Terms into PO Header
!   13/12/2007    R Nunn        Remedy 162630 - Correct exchangerate value
!   29/05/2008    R Nunn        Remedy 197597 - Problem with Order Quantity
!   22/07/2008    R Nunn        footPrint 24886- Remove double spacing from report Print out
!   28/11/2008    R Nunn        footPrint 37373 tax code change from 'GM' to 'g4'
!   15/05/2009    R Nunn        footPrint 51980  Remove FAX and Email status. Keep PO to 'WAPPR', 'MINVAL' status only
!   02/11/2009    R Nunn        footPrint 69505  To allow automation of report to run where Item/in15 = 'N' old report name = REORDGEC
!   15/12/2009    R Nunn        footPrint 76810 tax code change from 'G4' to 'GM'
!   03/02/2010    A Newman      footPrint 82410 - POLines pick up incorrect Price Agreement for item
!   30/11/2010    G Stephen     Project Wales - VAT Changes to 'AZ'
!   14/12/2010    G Stephen     Project Wales - Add new purchase groups
!   18/04/2021    G Bishop      Beautified code for documentation - note: these will not compile
!----------------------------------------------------------------

!------------------------------------------------------------
! Start of program
!------------------------------------------------------------
Begin-Setup

    #Define Arial               4
    #Define Courier             3
    #Define Times               5

    #Define RepName             'REORDFAN.SQT'
    #Define PONumber            'PO Number'
    #Define Statusset           'Status set to'
    #Define MinvalMsg           'Note that previous status was MINVAL'
    #Define PONotAppr           'PO Not Approved'
    #Define UserPOLimit         'Users PO Limit is'
    #Define POTotalCost         'PO Total Cost is'
    #Define ApprovalOtherUser   'Approval is required by another user who has the appropriate PO limits'
    #Define NoFax               'Could not Fax as vendor record has no fax number'
    #Define NoEMail             'Could not E-Mail as vendor record has no E-Mail address'
    #Define NoDefStatus         'Could not auto-approve because no default status set in database'
    #Define NoAutoApprove       'PO not approved beacause Auto Approve is not enabled'

    Declare-Report Reorder
        Layout = A4_paper_landscape
        PrinterType = HPLASERJET
    End-Declare

    Declare-Layout A4_paper_landscape
        Orientation = landscape
        Paper-Size = (11.69,8.27)
        Left-Margin = .12
        Right-Margin = .12
        Top-Margin = .3
        Bottom-Margin = .25
    End-Declare

    Declare-Printer HP-definition
        Type = HPLASERJET
        Font = 3
        Point-Size = 10
    End-Declare

    Declare-Image logo
        Type = BMP-FILE
        Image-Size = (8,3)
        Source = 'logo.bmp'
    End-Declare

End-Setup

#Define Notusedprompt       'Parameter not used.  Press enter to continue'
#Define Schemaprompt        'Insert schema name'
#Define Whereprompt         'Insert where clause'
#Define targetlanguage  ENG

#Define p1Type 'CHAR'
#Define p2Type 'N/A'
#Define p3Type 'N/A'
#Define p4Type 'N/A'

#Define p1prompt 'ENTER PURCHASE GROUP'
#Define p2prompt 'ENTER I = ROI, R = ROR, B = BOTH'
#Define p3prompt 'Enter first Warehouse'
#Define p4prompt 'Enter second Warehouse'
#Define p5prompt 'Enter third Warehouse'
#Include 'Input.h'

!------------------------------------------------------------
! Heading
!------------------------------------------------------------
Begin-Heading 9
    Print-Image logo                                (1,100)
    Alter-Printer Font = {Arial} Point-Size = 10
    Print 'Date : '                                 (1,1)   BOLD
    Print &today                                    (,6)    BOLD
    Alter-Printer Font = {Arial} Point-Size = 12

    Print 'REORDER REPORT DETAILS'                  (+2,40) BOLD
    Print 'Warehouses:'                             (+1,1)  BOLD

    Let $warehouses= $storeroom1

    If $storeroom2<>''
        Let $warehouses=$warehouses|| ', ' || $storeroom2

        If $Storeroom3<>''
            Let $warehouses=$warehouses || ', ' || $Storeroom3
        End-If
    Else
        If $Storeroom3<>''
            Let $warehouses=$warehouses|| ', ' || $Storeroom3
        End-If
    End-If

    Print $WAREHOUSES                       (,13) bold

    graphic                                (+1,1,110) horz-line

    Alter-Printer Font = {Arial} Point-Size = 8
    Print 'Item'                        (+1,1)  BOLD
    Print 'Last inv'                    (,48)   BOLD
    Print 'Last'                        (,58)   BOLD
    Print 'PO'                          (,65)   BOLD
    Print 'RA'                          (,82)   BOLD
    Print 'Order'                       (,86)   BOLD
    Print 'Last'                        (,92)   BOLD
    Print 'Number'                      (+1,1)  BOLD
    Print 'Description'                 (,10)   BOLD
    Print 'Stat'                        (,35)   BOLD
    Print 'Quantity'                    (,41)   BOLD
    Print 'Price'                       (,48)   BOLD
    Print 'Value'                       (,58)   BOLD
    Print 'date'                        (,65)   BOLD
    Print 'Vendor'                      (,75)   BOLD
    Print 'approval'                    (,85)   BOLD
    Print 'Issued'                      (,92)   BOLD
    Print 'PO No.'                      (,98)   BOLD
    Print 'C'                           (,108)  BOLD

    graphic                             (+1,1,110) horz-line

End-Heading

!------------------------------------------------------------
! Program
!------------------------------------------------------------
Begin-Program
    Let #line = 1
    Let #mrfirst = 1
    Let #counter = 0
    Let #created = 0
    Let $internalcontact=''
    Let $internalphone=''
    Let #records=0
    Let #totqty=0
    Let #totvalue=0
    Let $exchangecurrent='Y'

    Do Get-Input
    Input $P5 {p5prompt}

    Do Check-Input

    Let $userok='Y'
    If Upper($USERNAME) <> 'MAXIMO' AND Upper($USERNAME)<> 'SYSADM'

        Let $report_name='REORDER'
        Do User_Check

    End-If

    If $userok='N'
        Let $Print = $username||' cannot run this report'
        Print $Print        (+5,10)
        stop quiet
    End-If

    Do GetDllFlagsValues
    Do GetApprovalLimit
    Do Reorder
    Do Date
    Do Labour_Get                           ! find internal contact and phone number from labor
    Do WONum_Get                            ! get default wonum
    Do Default_Currency_Get                 ! get default currency
    Do Main                                 ! order items which have fallen under minlevel requires STOCK

    If #records > 0
        Do CalculateStatus                  ! Calculates the status of the last po added and prints a line
    End-If

    graphic                                 (+1,41,5) horz-line
    graphic                                 (,58,5)  horz-line
    graphic                                 (,41,5)  horz-line
    graphic                                 (,58,5)  horz-line

    Print 'Total number of items printed'   (+2,1)
    Print #records                          (,29) edit 99999

End-Program

!------------------------------------------------------------
! Check user input
!------------------------------------------------------------
Begin-Procedure Check-Input
    Let $Storeroom1 = Upper($P3)
    Let $storeroom2 = Upper($P4)
    Let $Storeroom3 = Upper($P5)

    !Checks to If there is a valid Input
    If ($where = '' or $where = '*')
        Let $where = '1=1'
    End-If

    While 1=1
        Uppercase $P1
        Let $purchasegroup=$p1

        If $purchasegroup>='347' AND $purchasegroup<='352'
            Let $billto='GMBPCBILL'
            Let $shipto='GMBPCSHIP'
            Break
        End-If

        If $purchasegroup='131' OR $purchasegroup='132'
            Let $billto='GMICBILL'
            Let $shipto='GMICSHIP'
            Break
        End-If

        If $purchasegroup='141' OR $purchasegroup='142'
            Let $billto='GMIIBILL'
            Let $shipto='GMIISHIP'
            Break
        End-If

        Input $P1  'Enter a valid purchasegroup'
        Uppercase $p1

    End-While

    While 1=1

        Uppercase $P2
        Let $Itemin5 = Upper($P2)

        If $Itemin5 = 'I'
            Let $ROIROR = ' AND ITEM.IN5 = '||'''ROI'''||''
            Break
        End-If

        If $Itemin5 = 'R'
            Let $ROIROR = ' AND ITEM.IN5 = '||'''ROR'''||''
            Break
        End-If

        If $Itemin5 = 'B'
            Let $ROIROR = ' AND ITEM.IN5 IN ('||'''ROI'''||','||'''ROR'''||')'
            Break
        End-If

        Input $P2  'ENTER I = ROI, R = ROR, B = BOTH'
        Uppercase $P2

    End-While


End-Procedure

!------------------------------------------------------------
! Clear out reorder table
!------------------------------------------------------------
Begin-Procedure Reorder
    Let $errplace='Error in Reorder : Delete From Reorder'

    Begin-Sql on-error=SQL_Error
        Delete from Reorder;
    End-Sql


End-Procedure

!------------------------------------------------------------
! Gets date 6 months ago from today
!------------------------------------------------------------
Begin-Procedure Date
    Begin-Sql
        Alter session set nls_date_format = 'DD-MON-YYYY';
    End-Sql

    Begin-Select
                To_Char(SYSDATE,'DD-Mon-YYYY')      &today
                add_months(trunc(SYSDATE),-6)       &date / $date
        from    dual
    End-Select

End-Procedure

!------------------------------------------------------------
! Get the gldebitaccnt from the locations file for the warehouse entered
!------------------------------------------------------------
Begin-Procedure GLAcc_Get
    Let $glcontrolacc=' '

    Begin-Select
                LOCATIONS.CONTROLACC      &controlacc / $glcontrolacc
                LOCATIONS.DESCRIPTION     &locdesc
        from    LOCATIONS
        where   LOCATION = $location_temp
    End-Select

End-Procedure

!--------------------------------------------------------
! Labour_Get - Get the internal phone number and location
!--------------------------------------------------------
Begin-Procedure Labour_Get
    Begin-Select
                LABOR.NAME     &laborname / $internalcontact
                LABOR.CALLID   &phonenum / $internalphone
        from    LABOR
        where   Upper(LABORCODE) = Upper($username)
    End-Select
End-Procedure

!------------------------------------------------------------
! Get the workorder number
!------------------------------------------------------------
Begin-Procedure WONum_Get
    Begin-Select
                MAXVARS.VARVALUE    &powonum / $powonum
        from    MAXVARS
        where   VARNAME = 'REORDER_WONUM'
    End-Select
    Let $powonum = ''                      ! Workorder no longer required on PR (for now?) BH - 14-May-02
End-Procedure

!------------------------------------------------------------
! Get the default currency
!------------------------------------------------------------
Begin-Procedure Default_Currency_Get
    Let $default_currency='GBP'
    Begin-Select
                MAXVARS.VARVALUE    &currency / $default_currency
        from    MAXVARS
        where   VARNAME = 'BASECURRENCY1'
    End-Select
End-Procedure

!------------------------------------------------------------
! Main
!------------------------------------------------------------
Begin-Procedure Main
    Let $lastvendor = '*'
    Let #itemld=0
    Let $ldtable='ITEM'
    Let $ldfield='DESCRIPTION'

    Begin-Select
                INVENTORY.ITEMNUM                           &itemnum
                INVENTORY.MINLEVEL                          &minlevel
                INVENTORY.MAXLEVEL                          &maxlevel
                INVENTORY.LOCATION                          &location  / $location_temp
                nvl(INVENTORY.VENDOR,'ZZZZZZ')              &vendor
                INVENTORY.ORDERQTY                          &orderqty
                ITEM.DESCRIPTION                            &itemdesc
                ITEM.INSPECTIONREQUIRED                     &inspectionrequired
                ITEM.LDKEY                                  &itemld
                INVENTORY.MANUFACTURER                      &manufacturer
                INVENTORY.MODELNUM                          &modelnum
                INVENTORY.CATEGORY                          &category
                INVENTORY.CATALOGCODE                       &catcode
                INVENTORY.ORDERUNIT                         &orderunit - if isnull($orderunit) then $orderunit='EA'
                INVENTORY.LASTCOST                          &lastcost
                INVENTORY.CONVERSION                        &conversion
                (INVENTORY.ORDERQTY * INVENTORY.LASTCOST)   &total
                INVENTORY.LASTISSUEDATE                     &lastissuedate
                INVENTORY.IL1                               &il1 / $agreementno
                ITEM.IN5                                    &in5 / $orderapproval
                ITEM.IN4                                    &in4 / $resperson
                ITEM.IN3                                    &in3 / $criticality
                ITEM.IN19                                   &in19 / $in19
                INVENTORY.DELIVERYTIME                      &deliverytime

            let #woqty=0
            Do GLAcc_Get
            Do WO_Check  ! find out If there are any items on work orders to be ordered

            If #maxlevel > 0 or #woqty>0
                Do CurBal
            End-If

        From    INVENTORY,
                ITEM
        where   INVENTORY.ITEMNUM = ITEM.ITEMNUM
        and     INVENTORY.CATEGORY = 'STK'
        and     ITEM.OUTSIDE<>'Y'
        and (  (ITEM.STOCKTYPE not in ('REDSTK', 'WASTE') or ITEM.STOCKTYPE is null)
        and (   ITEM.IN22 is null or trunc(SYSDATE) > trunc(ITEM.IN22)))
        and (   ITEM.IN15 = 'N')
        and (   INVENTORY.LOCATION = $Storeroom1
        or      INVENTORY.LOCATION = $storeroom2
        or      INVENTORY.LOCATION = $Storeroom3)
        [$ROIROR]

        order by
                nvl(INVENTORY.VENDOR,'ZZZZZZ'),
                INVENTORY.ITEMNUM

    End-Select

End-Procedure

!------------------------------------------------------------
! Check the Current balance of the items against their minimum level
!------------------------------------------------------------
Begin-Procedure CurBal

    Begin-Select
                Sum(CURBAL)          &fcurbal

            Move &minlevel to #min
            Move &fcurbal to #fcurbal

            If (#fcurbal - #woqty) <= #min                                          ! Current balance less reserved below minimum level or items from work orders to be ordered
                Move #fcurbal to #qty
                Let #poqty=0
                Let #prqty=0

                Do PR_Check
                Do PO_Check

                Let #orderqty=0

                Let #orderqty = (#maxlevel - #poqty - #prqty - #fcurbal + #woqty)   ! add the quantity from the work order to the quantity to order

                If #conversion=0
                    Let #conversion=1
                End-If

                Let #orderqty_converted=round(((#orderqty/#conversion)-0.5),0)

                If #orderqty_converted<0
                    Let #orderqty_converted=0
                End-If

                Let $priceflag = 'N'                                                ! Is the item on a proce agreement' !82410 - moved line up before If statement
                Let #nullagreement = isnull($agreementno)                           !82410 - moved line up before If statement
                Let $panum=''                                                       !82410 - set this to null before entering PO_Check procedure
                Let $agreementpoType = ''                                           !82410 - set this to null before entering PO_Check procedure

                If (#qty - #woqty) <= #min and #orderqty_CONVERTED >0               ! Current balance - reserved + quantities on PR's and PO's still below minimum level or items from work orders to be ordered, Quantity to be ordered has to be greater than 0

                    If $vendor!='ZZZZZZ'                                            ! Vendor is not null
                        If #nullagreement <> 1                                      ! i.e. not null
                            Do Price_Check                                          ! Find out If there is a price agreement for the item for this vendor
                        End-If

                        Do HandleLines                                              ! Find out If vendor is valid and then create he POLINE for the item
                        Do UpdatePOReqDeliveryDate                                  ! Updates the Reqdeliverydate on the polines to be the max date on the lines.
                        Do UpdateTax1Value
                        Move $vendor to $lastvendor
                        Move $ponumins to $lastponumins
                    Else                                                            ! Vendor is null

                        If $lastvendor <> '*' and $lastvendor <> 'ZZZZZZ'           !If last vendor was not null then Do the status....for it. RCooke.
                            Do CalculateStatus                                      !Set status for previous order     !This wont run If there is only one vendor, as it will be *
                        End-If

                        Let $tax1code=''
                        Let $currencycode=$default_currency
                        Let #exchangerate=0
                        Let $exchangedate=''
                        Let $contract=''
                        Move 'ZZZZZZ' to $lastvendor
                    End-If

                End-If
            End-If

        From    INVBALANCES
        where   ITEMNUM = $itemnum
        and     LOCATION = $location
    End-Select

End-Procedure

!------------------------------------------------------------
! Update Tax1 Value
!------------------------------------------------------------
Begin-Procedure UpdateTax1Value
    Begin-Select
                Sum(TAX1) &sumTax1 / #sumtax1
        from    POLINE
        where   PONUM = $ponumins
    End-Select

    Begin-Sql
        update  PO set TOTALTAX1 = #sumTax1 where PONUM = $ponumins
    End-Sql

End-Procedure

!------------------------------------------------------------
! Update PO Req Delivery Date
!------------------------------------------------------------
Begin-Procedure UpdatePOReqDeliveryDate
    Begin-Select
                min(REQDELIVERYDATE)    &minreqdeliverydate  / $minrequireddate
        from    POLINE
        where   PONUM = $ponumins
    End-Select

    Begin-Sql
        update  PO
        set     REQUIREDDATE    = $minrequireddate
        where   PONUM = $ponumins;

        update  POLINE
        set     REQDELIVERYDATE = $minrequireddate
        where   PONUM = $ponumins;
    End-Sql
End-Procedure

!------------------------------------------------------------
!
!------------------------------------------------------------
Begin-Procedure PR_Check
    move 0 to #prexists
    move 0 to #prqty
    Begin-Select                                                            ! Checks If the items retieved are already on Purchase Request
                Sum(PRLINE.CONVERSION * PRLINE.ORDERQTY) &prqty
        move 1 to #prexists
        move &prqty to #prqty
        add #prqty to #qty

        from    PRLINE PRLINE,
                PR PR
        where   PRLINE.ITEMNUM = $itemnum
        and     PR.PRNUM = PRLINE.PRNUM
        and     PR.STATUS in (  select  VALUE
                                from    VALUELIST
                                where   LISTNAME = 'PRSTATUS'
                                and     MAXVALUE in ('WAPPR','APPR'))
        and     PRLINE.PONUM is null
    End-Select
End-Procedure

!------------------------------------------------------------
! Checks If the items retrieved are already on Purchase Order
!------------------------------------------------------------
Begin-Procedure PO_Check
    move 0 to #poexists
    move 0 to #poqty
    move 0 to #qty

    Begin-Select
                POLINE.PONUM                                ponumnis
                POLINE.CONVERSION                           poconv
            (   POLINE.ORDERQTY - POLINE.RECEIVEDQTY)       poordr_rec
                PO.STATUS                                   &status / $postatus
                POLINE.RECEIPTSCOMPLETE                     receiptscomplete

            move 1 to #poexists
            move 0 to #poqty

            Let #poconv = &poconv
            move &poordr_rec to #poordr_rec

            Let #poqty = #poconv * #poordr_rec
            add #poqty to #qty

        From    POLINE,
                PO
        where   PO.PONUM = POLINE.PONUM
        and     POLINE.ITEMNUM = $itemnum
        and     PO.POTYPE <> 'PRICE'
        and    (PO.STATUS in (  select  VALUE
                                from    VALUELIST
                                where   LISTNAME = 'POSTATUS'
                                and     MAXVALUE in ('WAPPR','APPR','PRINT','FAX','EMAIL'))
        or      PO.STATUS = 'MINVAL')
        and     POLINE.RECEIVEDQTY < POLINE.ORDERQTY
    End-Select

    Let #poqty=#qty

End-Procedure

!------------------------------------------------------------
! Find out If item is on a current price agreement. If so use the unitcost
!------------------------------------------------------------
Begin-Procedure Price_Check
    Let $contract=''
    Let $panum=''
    Let $agreementpoType=''

    Begin-Select
                po.PONUM                                                &panum / $panum
                POLINE.UNITCOST                                         &CHECKLASTCOST
                PO.PO8                                                  &contract
                PO.CURRENCYCODE                                         &pricecurrency
                PO.EXCHANGERATE                                         &pricerate
                PO.STATUS                                               &status1 / $postatus
                POLINE.RECEIPTSCOMPLETE                                 &receiptscomplete1 / $receiptscomplete

                To_Char(PO.EXCHANGEDATE,'DD-MON-YYYY')                  &pricedate
                trunc(PO.ENDDATE)                                       &paenddate
                trunc(SYSDATE)                                          &paSYSDATE

                If &paenddate < &paSYSDATE
                    !DOSTUFF
                Else
                    !DO_ERROR_REPORT
                End-If

                MOVE &CHECKLASTCOST TO #LASTCOST

                Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)

                move &contract to $contract
                Let $currencycode=&pricecurrency
                Let #exchangerate=&pricerate
                Let $exchangedate=&pricedate
                Let $priceflag='Y'

        from    POLINE,
                PO
        where   PO.PONUM = POLINE.PONUM
        and     POTYPE='PRICE'                                      ! *** CAA - USE PRICE AGREEMENTS THAT ARE APPROVED OR Print STATUS ONLY ***
        and     POLINE.ITEMNUM = $itemnum
        and     PO.VENDOR = $vendor
        and     PO.STATUS in (  select  VALUE
                                from    VALUELIST
                                where   LISTNAME = 'POSTATUS'
                                and     MAXVALUE in ('APPR','PRINT'))
        and ((trunc(SYSDATE) >= trunc(PO.STARTDATE))
        and  (trunc(SYSDATE) <= trunc(PO.ENDDATE)))

    End-Select

    If $panum!=''
        Let $agreementpoType='PRICE'
    Else
        Let $agreementpoType=''
    End-If

End-Procedure

!------------------------------------------------------------
! $vendor <> $lastvendor                        !Do a new po
!------------------------------------------------------------
Begin-Procedure HandleLines
    move 0 to #found

    If $vendor <> $lastvendor                  !Do a new po
        If $lastvendor <> '*'
            Do CalculateStatus                 !Set status for previous order     !This wont run If there is only one vendor, as it will be *
        End-If

        Let $tax1code=''
        Let $currencycode=$default_currency
        Let #exchangerate=0
        Let $exchangedate=''
        Let $exchangecurrent='Y'               ! Flag to say If currency is current

        Begin-Select
                c.COMPANY                           &newcompany / $newcompany
                c.PAYMENTTERMS                      &paymentterms / $paymentterms
                c.CONTACT                           &contact / $contact
                c.FREIGHTTERMS                      &freightterms
                c.NAME                              &company / $vendorname
                nvl(c.TAX1CODE,'AZ')                &tax1code

                Do Find_Tax

                c.CURRENCYCODE                      &currencycode

                move &tax1code to $tax1code
                move &currencycode to $currencycode
                move &freightterms to $freightterms
                Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)

                ! If currency code of vendor is not Sterling locate the exchange rate and expiry date from EXCHANGE

                If $currencycode <> 'GBP'
                    Do Currency_Get
                    If #exchangerate = 0
                        Let #exchangerate = 1
                    End-If

                    !  If expiry date of currency is past flag it. Do not order for the vendor
                    If strtodate(&today,'DD-MON-YYYY') > strtodate($exchangedate,'DD-MON-YYYY')
                        Let $exchangecurrent='N'
                    End-If

                    ! If not on a price agreement and not GBP convert the unit cost
                    If $priceflag='N' and $currencycode<>'GBP' and #exchangerate<>0
                        Let #lastcost = (#lastcost / #exchangerate)
                        Let #lastcost = round(#lastcost,2)
                        Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)
                    End-If
                Else
                    Let #exchangerate = 1
                End-If

                move &currencycode to $currencycode

                Let $LASTPODATE=''
                Do PODate_Get

                If $exchangecurrent='Y'
                    Do MinValPO

                    If $minvalpo <> 'NONE'
                        Let $ponumins = $minvalpo
                        Do Update_MinVal_Line               !If a line already exists for the item then add it to the line.

                        If $insertnewline='Y'               !otherwise add a new line.
                            Do GetNextPOLine
                            Do Build_POLine
                        End-If
                    Else
                        Let #line = 1
                        Do Build_PO
                        Do Build_POLine
                    End-If
                Else
                    Do Print_NotOrdered
                End-If

                From COMPANIES c
                where c.COMPANY = $vendor
        End-Select

    Else
        Let #lastcost = round(#lastcost,2)
        Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)

        If $exchangecurrent='Y'
            Do MinValPO

            If $minvalpo <> 'NONE'
                Let $ponumins = $minvalpo
                Do Update_MinVal_Line           !If a line already exists for the item then add it to the line.

                If $insertnewline='Y'            !otherwise add a new line.
                    Do GetNextPOLine
                    Do Build_POLine
                End-If
            Else
                Do GetNextPOLine-Normal
                Do Build_POLine
            End-If
        Else
            Do Print_NotOrdered

        End-If
    End-If

End-Procedure

!------------------------------------------------------------
! Update_MinVal_Line - If the item already exist on the po then add it to the same line (increase qty) otherwise add new line.
!------------------------------------------------------------
Begin-Procedure Update_MinVal_Line
    Let $insertNewLine=''
    Let #linenumx=0

    Begin-Select
                POLINENUM   &linenumx       / #linenumx
                ORDERQTY    &orderqtyx      / #orderqtyx
                LINECOST    &linecostx      / #linecostx
                TAX1        &tax1x          / #tax1x
                LOADEDCOST  &loadedcostx    / #loadedcostx
        from    POLINE
        where   PONUM = $ponumins
        and     ITEMNUM = $itemnum
    End-Select

    If #linenumx>0
        Let #new_orderqty=#orderqtyx+#orderqty_converted
        Let #new_linecost=#linecostx+(#lastcost*#orderqty)
        Let #new_tax1=#tax1x+#tax1
        Let #new_loadedcost=#loadedcostx+(#lastcost*#orderqty_converted)+#tax1 !NR Remedy 80005 added tax1 onto end

        Begin-Sql
            update  POLINE
            set     ORDERQTY    = #new_orderqty,
                    LINECOST    = #new_linecost,
                    TAX1        = #new_tax1,
                    LOADEDCOST  = #new_loadedcost
            where   PONUM       = $ponumins
            and     POLINENUM   = #linenumx
        End-Sql
        Let $insertNewLine = 'N'
    Else
        Let $insertNewLine = 'Y'
    End-If

    Do CalcTotalCost

    Begin-Sql on-error=SQL_Error
        update PO set TOTALCOST = #POtotalcost where PONUM = $ponumins;
        update PO set CHANGEDATE = SYSDATE where PONUM = $ponumins;
    End-Sql

    Do PrintPO
    Let $printedalready = 'Y'

End-Procedure

!------------------------------------------------------------
! Totalcost should be the sum of the linecost and the tax
!------------------------------------------------------------
Begin-Procedure CalcTotalCost
    Begin-Select
                Sum(LINECOST)   &linecostsum    / #linecostsum
                Sum(TAX1)       &tax1sum        / #tax1sum
        from    POLINE
        where   PONUM = $ponumins
    End-Select
    Let #POTotalcost=#linecostsum + #tax1sum
End-Procedure

!------------------------------------------------------------
! new procedure to find taxrate
!------------------------------------------------------------
Begin-Procedure Find_Tax
    Let #taxrate = ''
    Begin-Select
                TAXRATE     &taxrate / #taxrate
        from    TAX
        where   TAXCODE = &tax1code
        and     TYPECODE = '1'
    End-Select
End-Procedure

!------------------------------------------------------------
!
!------------------------------------------------------------
Begin-Procedure PODate_Get
    Begin-Select
                LASTDATE        &lastdate / $lastpodate
        from    INVVENDOR
        where   VENDOR = $vendor
        and     ITEMNUM = $itemnum
    End-Select
End-Procedure

!------------------------------------------------------------
!
!------------------------------------------------------------
Begin-Procedure Currency_Get
    Begin-Select
                EXCHANGERATE                            exchangerate
                To_Char(EXPIREDATE,'DD-MON-YYYY')       expiredate
        from    EXCHANGE
        where   CURRENCYCODETO = 'GBP'
        and     CURRENCYCODE = $currencycode
        order by    EXPIREDATE
    End-Select
End-Procedure

!------------------------------------------------------------
! Build PO header record At present there ae no prefixes on PO numbers. This will work If there is one
!------------------------------------------------------------
Begin-Procedure Build_PO

    Begin-Select
                VARVALUE  &reordergecstore  / $reordergecstore
        from    MAXVARS
        where   VARNAME = 'REORDERGECSTORE'
    End-Select

    Begin-Select
                FUNCTIONVALUE &contactvalue / $contactlaborcode
        from    BPDLLFC
        where   FUNCTIONID = '202'
    End-Select

    Begin-Select
                NAME    &contactname    /   $Internal_Contact
                CALLID  &contactcallID  /   $Internal_Contact_Phone
        FROM    LABOR
        WHERE   LABORCODE = $contactlaborcode
    End-Select

    Begin-Select
                To_Char(SEED+1)                  &ponumins  /   $ponumins / #ponumins
                PREFIX                           &prefix    /   $prefix

            Let $ponumins=$prefix||$ponumins

        From    AUTOKEY
        where   TBNAME = 'PO'
    End-Select

    ! Reset vendor back to null for printing and inserting into records
    If $vendor='ZZZZZZ'
        Let $vendor=''
    End-If


    ! Make sure that the exchange rate is always 1 for GBP PRs
    If $currencycode = 'GBP'
        Let #exchangerate = 1
    End-If

    Let $errplace='Error in Build_PO : Insert into PO'
    Begin-Sql on-error=SQL_Error

        Insert into PO    ( PONUM,DESCRIPTION,PURCHASEAGENT,ORDERDATE,REQUIREDDATE,FOLLOWUPDATE,
                            POTYPE,ORIGINALPONUM,STATUS,STATUSDATE,VENDOR,CONTACT,FREIGHTTERMS,
                            PAYMENTTERMS,SHIPVIA,CUSTOMERNUM,FOB,SHIPTO,SHIPTOATTN,BILLTO,
                            BILLTOATTN,TOTALCOST,CHANGEBY,CHANGEDATE,PRIORITY,HISTORYFLAG,
                            PO1,PO2,PO3,PO4,PO5,PO6,PO7,PO8,PO9,PO10,LDKEY,VENDELIVERYDATE,
                            RECEIPTS,CURRENCYCODE,EXCHANGERATE,EXCHANGEDATE,BUYAHEAD,TOTALTAX1,
                            TOTALTAX2,TOTALTAX3,INCLUSIVE1,INCLUSIVE2,INCLUSIVE3,INTERNAL,
                            TOTALTAX4,TOTALTAX5,INCLUSIVE4,INCLUSIVE5,STARTDATE,ENDDATE,
                            PAYONRECEIPT,WFID,WFACTIVE,BUYERCOMPANY,EXCHANGERATE2,MNETSENT,
                            ECOMERROR,ECOMSTATUSDATE,SOURCESYSID,OWNERSYSID,EXTERNALREFID,APISEQ,
                            INTERID,MIGCHANGEID,SENDERSYSID,EXPDONE)

                Values(     $ponumins,SUBSTR($vendorname,1,34)||' STORES REORDER',$DefaultBuyer,
                            SYSDATE,SYSDATE+7,NULL,'PART',NULL,'WAPPR',SYSDATE,$vendor,$contact,
                            $freightterms,$paymentterms,NULL,NULL,NULL,$SHIPTO,NULL,$BILLTO,      !paymentterms added 176424
                            NULL,0,Upper($username),SYSDATE,0,'N',
                            NULL,$reordergecstore,NULL,$Internal_Contact,$Internal_Contact_Phone,$PurchaseGroup,NULL,NULL,NULL,NULL,NULL,NULL,
                            'NONE',$currencycode,#exchangerate,to_date($exchangedate,'DD-MON-YYYY'),'N',
                            0,0,0,'Y','Y','Y','N',0,0,'Y','Y',NULL,NULL,
                            'N',NULL,NULL,NULL,0,'N',NULL,NULL,
                            NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);


            !Update the seed value for the next one
        Update AUTOKEY set SEED = SEED+1 where TBNAME = 'PO';

        Insert into POSTATUS (PONUM,STATUS,CHANGEDATE,CHANGEBY,MEMO)
                        Values ($ponumins,'WAPPR',SYSDATE,'MAXIMO','Auto Reorder');
    End-Sql
End-Procedure

!------------------------------------------------------------
! Build PO Lines record
!------------------------------------------------------------
Begin-Procedure Build_POLine

    Begin-Select        !This value retrived will be copied to the line as POLINE.POLINEID
                max( POLINEID )+1  &nextval / #nextval
        From    POLINE
    End-Select

    Begin-Select
                LDTEXT                  &ldtext     !Get the Long text for the Item
        From    LONGDESCRIPTION
        where   LDKEY = #itemld
        and     LDOWNERTABLE = 'ITEM'
        and     LDOWNERCOL = 'DESCRIPTION'
    End-Select

    ! Find the ldkey
    Let #VLOW=0
    Let #PLDKEY=0
    Let $ptable='POLINE'
    Let $ptable = 'WHERE LDOWNERTABLE='||''''||$ptable||''''

    Begin-Select
            trunc( LDKEY/100000 ) * 100000  &THERANGE
            count(*)                        &THECOUNT / #thecount

            If #THECOUNT < 2 AND #VLOW <> 0
                Do LDKEY_Get
                If #PLDKEY > 0
                    Exit-Select
                End-If
            Else
                Let #VLOW = #THECOUNT
            End-If

        FROM  LONGDESCRIPTION
             [$PTABLE]                              ! WHERE LDOWNERTABLE = POLINE
        GROUP BY trunc(LDKEY/100000)*100000
    End-Select

    Begin-Select
                ENABLE      &addLeadTime / $AddLeadTime
        from    BPDLLFC
        where   FUNCTIONID = '209'
    End-Select

    If $addleadtime='Y'
        Let #extratime= 7+#deliverytime
    Else
        Let #extratime= 7
    End-If

    Let $errplace='Error in Build_POLine : Insert into POLINE'

    Begin-Sql on-error=SQL_Error

        Insert into POLINE (PONUM,ITEMNUM,STORELOC,MODELNUM,CATALOGCODE,ORDERQTY,ORDERUNIT,
                            UNITCOST,CONVERSION,RECEIVEDQTY,RECEIVEDUNITCOST,RECEIVEDTOTALCOST,
                            REJECTEDQTY,VENDELIVERYDATE,SUPERVISOR,ENTERDATE,ENTERBY,DESCRIPTION,
                            PL1,PL2,PL3,PL4,PL5,LDKEY,WONUM,REQUESTEDBY,REQDELIVERYDATE,ISSUE,
                            POLINENUM,TAXED,WPOPERATION,PLIN1,PLIN2,PLIN3,PLIN4,PLIN5,EQNUM,
                            CHARGESTORE,GLDEBITACCT,GLCREDITACCT,LINECOST,TAX1CODE,
                            TAX1,TAX2CODE,TAX2,TAX3CODE,TAX3,SCHARGECODE,RECEIPTREQD,MANUFACTURER,SERVICE,
                            TAX4CODE,TAX4,TAX5CODE,TAX5,CATEGORY,REMARK,LOCATION,LOADEDCOST,
                            PRORATESERVICE,AGREEMENTPONUM,AGREEMENTPOTYPE,RECEIPTSCOMPLETE,
                            INSPECTIONREQUIRED,PRORATECOST,POLINEID,LINECOST2,MRNUM,MRLINENUM,
                            PL6,PL7,PL8,PL9,PL10,PLIN6,PLIN7,PLIN8,PLIN9,POLALN1,POLALN2,
                            POLALN3,POLALN4,POLALN5,PCARDNUM,PCARDTYPE,PCARDEXPDATE,FINCNTRLID,
                            PCARDVERIFICATION,MKTPLCITEM,VENDORPACKCODE,VENDORPACKQUANTITY,
                            VENDORWAREHOUSE)
        Values      (       $ponumins,$itemnum,$location,$modelnum,$catcode,#orderqty_converted,
                            $orderunit,(#lastcost*#conversion),#conversion,0,0,0,0,NULL,
                            NULL,SYSDATE,Upper($username),$itemdesc,
                            NULL,NULL,NULL,NULL,NULL,#pldkey,$powonum,NULL,(SYSDATE + #extratime),
                            'N',#line,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
                            NULL,'N',$glcontrolacc,NULL,(#lastcost*#orderqty_converted*#conversion),$tax1code,
                            #tax1,NULL,0,NULL,0,NULL,'N',$manufacturer,'N',
                            NULL,0,NULL,0,'STK',NULL,$location,(#lastcost*#orderqty_converted),
                            'N',$panum,$agreementpoType,'N',
                            $inspectionrequired,0,#nextval,NULL,NULL,NULL,
                            NULL,NULL,NULL,NULL,'28000',NULL,NULL,NULL,NULL,NULL,NULL,
                            NULL,NULL,NULL,NULL,NULL,NULL,NULL,
                            NULL,'N',NULL,NULL,NULL);

    End-Sql

    Let $errplace='Error in Build_POLine : Insert into POLINE longdescription'
    Let #ldnull = isnull(&ldtext)
    If #ldnull <> 1
        Begin-Sql on-error=SQL_Error
            Insert into  LONGDESCRIPTION (LDKEY,LDOWNERTABLE,LDOWNERCOL,LDTEXT) Values (#pldkey,'POLINE','DESCRIPTION',&ldtext);
        End-Sql
    End-If

    Do CalcTotalCost            !Calculates the total cost of the po.

    Begin-Sql on-error=SQL_Error
        Update PO set TOTALCOST = #POtotalcost where PONUM = $ponumins;
    End-Sql

    Let $errplace='Error in Build_POLine : Insert into Reorder'

    Begin-Sql on-error=SQL_Error        ! Build reorder record
        Insert into REORDER (ITEMNUM,LOCATION,VENDOR,MINLEVEL,
                            MAXLEVEL,CATEGORY,ROTATING,ORDERQTY,ORDERUNIT,
                            COST,CONVERSION,IN19,IN20,IN21,
                            IN22,IN23,CURBAL,WONUM,REQUIREDATE,
                            REQUESTBY,SCHEDSTART,TARGSTARTDATE,WPOPERATION,GLACCOUNT,
                            DELIVERYTIME,LOTTYPE,MANUFACTURER,MODELNUM,CATALOGCODE,
                            CONTROLACC,EQNUM,EQLOCATION,RESERVEDQTY,PRQTY,
                            POQTY,MRNUM,MRLINENUM,SERVICE,SCHARGECODE,
                            IN24,IN25,IN26,IN27,REORDERQTY,
                            AGREEMENTPONUM,AGREEMENTPOTYPE,PAYONRECEIPT,CURRENCYCODE)
        Values              ($itemnum,$location,$vendor,#minlevel,
                            #maxlevel,'cat',NULL,#orderqty_converted,$orderunit,
                            #lastcost,$conversion,NULL,NULL,NULL,
                            NULL,$ponum,#fcurbal,NULL,SYSDATE+7,
                            'MAXIMO',NULL,NULL,NULL,$glcontrolacc,
                            NULL,NULL,$manufacturer,$modelnum,$catcode,
                            NULL,NULL,NULL,NULL,NULL,
                            NULL,NULL,NULL,NULL,NULL,
                            NULL,NULL,NULL,NULL,NULL,
                            $panum,$agreementpoType,NULL,NULL);
    End-Sql

    If $printedalready='Y'
        Let $printedalready='N'
    Else
        Do PrintPO
    End-If

End-Procedure

!------------------------------------------------------------
! WO_Check
!------------------------------------------------------------
Begin-Procedure WO_Check
    Begin-Select
                INVRESERVE.RESERVEDQTY          woreserved
                INVRESERVE.ACTUALQTY            woactual

            Let #woqty = #woqty + (#woreserved)

        from    WORKORDER,
                INVRESERVE
        where   INVRESERVE.ITEMNUM = $itemnum
        and     INVRESERVE.WONUM = WORKORDER.WONUM
        and     WORKORDER.STATUS in (   select  VALUE
                                        from    VALUELIST
                                        where   LISTNAME = 'WOSTATUS'
                                        and     MAXVALUE in ('APPR'))
    End-Select
End-Procedure

!------------------------------------------------------------
! PrintPO - Uses #orderqty not orderqty_real - Andrea - 09 dec 2004
!------------------------------------------------------------
Begin-Procedure PrintPO
    Alter-Printer Font = {Arial} Point-Size =  8
    Print $itemnum                          (+1,1)
    Print $itemdesc                         (,10,33)
    Print $in19                             (,35)
    Print #orderqty                         (,41)
    Print #lastcost                         (,48)

    Let #wvalue = (#orderqty*#lastcost)

    Print #wvalue                           (,58)
    Print $lastpodate                       (,65)
    Print $vendor                           (,75)
    Print $resperson                        (,82)
    Print $orderapproval                    (,87)
    Print &lastissuedate                    (,91)
    Print $ponumins                         (,98)
    Print $criticality                      (,108)

    add 1 to #records
    add #orderqty to #totqty
    add #wvalue to #totvalue

End-Procedure

!------------------------------------------------------------
! Print_NotOrdered - Say not ordered
!------------------------------------------------------------
Begin-Procedure Print_NotOrdered
    Alter-Printer Font = {Arial} Point-Size = 8
    Print $itemnum                          (+1,1)
    Print $itemdesc                         (,10,41)
    Print $in19                             (,39)

    Let #orderqty_real=#orderqty_converted*#conversion

    Print #orderqty_real                    (,42)
    Print #lastcost                         (,50)
    Let #wvalue = #orderqty_real * #lastcost
    Print #wvalue                           (,58)
    Print $lastpodate                       (,66)
    Print $vendor                           (,75)
    Print $resperson                        (,88)
    Print 'Exchange rate expired'           (,93)
    Print $exchangedate                     (,107)

    add 1 to #records
    add #orderqty_real to #totqty
    add #wvalue to #totvalue
End-Procedure

!------------------------------------------------------------
! Footer section of the report
!------------------------------------------------------------
Begin-Footing 3
    graphic                                 (+1,1,110) horz-line
    Print 'Report Name - '                  (+1,1) BOLD
    Print {repname}                         (,10)
    Alter-Printer Font = {Arial} Point-Size = 8
    Print 'Page - '                         (,55)
    Page-Number                             (,59)
    Print 'of '                             (,61)
    last-page                               (,63)
End-Footing

!------------------------------------------------------------
! Print the error position & Oracle SQL error, Then stop the report.
!------------------------------------------------------------
Begin-Procedure SQL_Error
    Print $errplace      (+2,1)
    Print $sql-error     (+3,5)
End-Procedure

!------------------------------------------------------------
! LDKEY_Get - Get the ldkey
!------------------------------------------------------------
Begin-Procedure LDKEY_Get
    Begin-Select
                MAX(LDKEY)+1      &PLDKEY / #PLDKEY
        from    LONGDESCRIPTION
                [$PTABLE]                           ! WHERE LDOWNERTABLE = POLINE
        and     LDKEY BETWEEN #VLOW and &THERANGE
    End-Select
End-Procedure

!------------------------------------------------------------
! MinValPO
!------------------------------------------------------------
Begin-Procedure MinValPO
    Let $minvalpo = 'NONE'
    Begin-Select
                PONUM   &minvalpo / $minvalpo
        from    PO
        where   VENDOR = $vendor
        and     POTYPE = 'PART'
        and     STATUS = 'MINVAL'
    End-Select
End-Procedure

!------------------------------------------------------------
! GetNextPOLine
!------------------------------------------------------------
Begin-Procedure GetNextPOLine
    Begin-Select
            max(POLINENUM)      &maxpolinenum           ! if null set to 1 otherwise add 1 to retunred value
            Let #maxplnull = isnull(&maxpolinenum)
            If #maxplnull = 1
                Let #line = 1
            Else
                Let #line = &maxpolinenum+1             ! RCooke +1
            End-If
        from    POLINE
        where   PONUM = $minvalpo
    End-Select

End-Procedure

!------------------------------------------------------------
!
!------------------------------------------------------------
Begin-Procedure GetNextPOLine-Normal
    Begin-Select
                max(POLINENUM)      &maxpolinenum-x         ! if null set to 1 otherwise add 1 to retunred value

            Let #maxplnull = isnull(&maxpolinenum-x)
            If #maxplnull = 1
                Let #line = 1
            Else
                Let #line = &maxpolinenum-x+1         !RCooke +1
            End-If
        from    POLINE
        where   PONUM = $ponumins
    End-Select

End-Procedure

!------------------------------------------------------------
! On Finishing adding PO lines for vendor
!------------------------------------------------------------
Begin-Procedure CalculateStatus
    move 0 to #pototcost
    move 0 to #pominval
    If $minvalenabled = 'Y'     ! If Minimum value in operation
        Begin-Select            ! Get PO total value  / Get PO Vendor Minimum Value
                    PO.TOTALCOST   &pototcost / #pototcost

                Let #pototcost = #pototcost * #exchangerate

                    po.STATUS       &curpostatus /  $curpostatus
                    cx.POMINVAL     &pominval

                Let #pomnull = isnull(&pominval)
                If #pomnull <> 1
                    move &pominval to #pominval
                End-If

            from    PO PO,
                    COMPANYX CX
            where   PO.VENDOR = CX.COMPANY (+)
            and     PO.PONUM = $lastponumins
        End-Select

        !If PO Total value less than PO Vendor Minimum Value
        If #pototcost < #pominval
            Do UpdatePOStatus( $lastponumins, 'MINVAL' )
        Else
            !The Minval PO will now be approved (set to EMAIL or FAX)
            !Set all required by dates to the maximo required by date.
            Do UpdateRequiredDates
            Do AddStatus
        End-If
    Else
        Do AddStatus
    End-If
End-Procedure

!------------------------------------------------------------
! UpdateRequiredDates
!------------------------------------------------------------
Begin-Procedure UpdateRequiredDates
    Begin-Select
                min(REQDELIVERYDATE)        minreqdeliverydateMinval
        from    POLINE
        where   PONUM = $lastponumins
    End-Select

    Begin-Sql
        update  POLINE
        set     REQDELIVERYDATE = $minreqdeliverydateMinval
        where   PONUM = $lastponumins;

        update  PO
        set     REQUIREDDATE = $minreqdeliverydateMinval
        where   PONUM = $lastponumins;
    End-Sql
End-Procedure

!------------------------------------------------------------
! AddStatus
!------------------------------------------------------------
Begin-Procedure AddStatus

    If #POTOTCOST = 0
        Do UpdatePOStatus($lastponumins,'WAPPR')
    Else
        If $apprenabled = 'Y'
            If #approvallimit >= #pototcost

                Evaluate  $DefaultStatus
                WHEN  = 'FAX'
                    Do CanFax($lastvendor,$CanFax)
                    If $CanFax = 'Y'
                        Do UpdatePOStatus($lastponumins,'FAX')  !REORDFAY = Do UpdatePOStatus($lastponumins,'WAPPR')
                        Break
                    Else
                        Print {NoFax} (+1,5)
                    End-If

                When  = 'EMAIL'
                    Do CanEMail($lastvendor,$CanEMail)
                    If $CanEMail = 'Y'
                        Do UpdatePOStatus($lastponumins,'EMAIL') 51980  !REORDFAY = Do UpdatePOStatus($lastponumins,'WAPPR')  !51980
                        Break
                    Else
                        Print {NoEMail} (+1,5)
                    End-If
                When-other
                    Do UpdatePOStatus($lastponumins,'WAPPR')
                    Print {NoDefStatus} (+1,5)
                    Break
                End-evaluate

            Else
                Do UpdatePOStatus($lastponumins,'WAPPR')

                Print {PONotAppr} (+1,5)
                Print ' ' (,+1)
                Print {UserPOLimit} (,+1)
                Print ' ' (,+1)
                Print #approvallimit (,+1) edit 99999999.99
                Print ' ' (,+1)
                Print {POTotalCost} (,+1)
                Print ' ' (,+1)
                Print #pototcost (,+1) edit 99999999.99
                Print {ApprovalOtherUser} (+1,5)

            End-If
        Else
            Do UpdatePOStatus($lastponumins,'WAPPR')
            Print {NoAutoApprove} (+1,5)
        End-If
    End-If

End-Procedure

!------------------------------------------------------------
! UpdatePOStatus - If prepared to write an extra line Report that MINVAL PO status change
! If approving the order then check that the vendor is not disqualified....
!------------------------------------------------------------
Begin-Procedure UpdatePOStatus( $ponum, $status )

    If $status='EMAIL' or $status='FAX'
        Begin-Select
                    VENDOR  &curvend / $curvend
            from    PO
            where   PONUM = $ponum
        End-Select

        Begin-Select
                    DISABLED    &disable / $disable
            from    COMPANIES
            where   COMPANY = $curvend
        End-Select

        If $disable='Y'
            Print 'PO cannot be approved. Vendor is disqualified.' (+1,5)
            Let $status='WAPPR'
        End-If

    End-If

    Let $addstatus = ''''||$status||''''
    Let $ponum = ''''||$ponum||''''
    Let $changeby = ''''|| $_username ||''''

    Begin-Sql on-error=SQL_Error
        update  PO set  STATUS       = [$addstatus],
                        STATUSDATE   = SYSDATE
        where   PONUM = [$ponum];
    End-Sql

    Begin-Sql on-error=SQL_Error
        insert into POSTATUS (  PONUM,
                                STATUS,
                                CHANGEBY,
                                CHANGEDATE,
                                MEMO)
        values              (   [$ponum],
                                [$addstatus],
                                [$changeby],
                                SYSDATE,
                                'AUTO REORDER')
    End-Sql

    If $status='EMAIL' or $status='FAX'
        Begin-Sql
            update  PO
            set     ORDERDATE = SYSDATE
            where   PONUM = [$ponum];
        End-Sql
    End-If

    Do EndLines ($ponum,$status)

End-Procedure

!------------------------------------------------------------
! GetDllFlagsValues
!------------------------------------------------------------
Begin-Procedure GetDllFlagsValues
    Begin-Select
                ENABLE          &minvalenabled / $minvalenabled
        from    BPDLLFC
        where   FUNCTIONID = 201
    End-Select

    move 1 to #nullbuyer
    move '' to $DefaultBuyer

    Begin-Select        ! establish value to use as PO.PURCHASEAGENT
                FUNCTIONVALUE       &DefaultBuyer
                Let #nullbuyer = isnull(&DefaultBuyer)
                move &DefaultBuyer to $DefaultBuyer
        from    BPDLLFC
        where   FUNCTIONID = 202
        and     ENABLE = 'Y'
    End-Select

    If (#nullbuyer = 1) or (&DefaultBuyer = '')
        Let $DefaultBuyer = Upper($username)
    End-If

    Begin-Select
                ENABLE &apprenabled / $apprenabled
        from    BPDLLFC
        where   FUNCTIONID = 203
    End-Select

    move 1 to #nullstatus
    move '' to $DefaultStatus

    Begin-Select
                FUNCTIONVALUE &DefaultStatus

            Let #nullstatus = isnull(&DefaultStatus)
            move &DefaultStatus to $DefaultStatus

        from    BPDLLFC
        where   FUNCTIONID = 204
        and     ENABLE = 'Y'
    End-Select

    If (#nullstatus = 1) or (&DefaultStatus = '')

        Let $DefaultStatus = 'WAPPR'               !REORDFAY = Let $DefaultStatus = 'APPR'                51980
    End-If

End-Procedure

!------------------------------------------------------------
!
!------------------------------------------------------------
Begin-Procedure GetApprovalLimit
    Let $appruser = ''''|| $username ||''''
    move 0 to #approvallimit
    Begin-Select
                ma.OPTIONVALUE                  &approvallimit / #approvallimit
        from    MAXUSERAUTH ma,
                MAXUSERGROUPS mu
        where   ma.APP = 'PO'
        and     ma.OPTIONNAME = 'POLIMIT'
        and     mu.USRNAME = [$appruser]
        and     ma.NAME = mu.GRPNAME
    End-Select
End-Procedure

!------------------------------------------------------------
! CanFax
!------------------------------------------------------------
Begin-Procedure CanFax($vendor,:$CanFax)
    Let $CanFax = 'N'
    Let $wherevendor = ''''||$vendor||''''

    Begin-Select
                FAX     &fax
            Let #isnull = isnull(&fax)
            If #isnull <> 1
                Let $CanFax = 'Y'
            End-If
        from    COMPANIES
        where   COMPANY = [$wherevendor]
    End-Select
End-Procedure

!------------------------------------------------------------
! CanEMail
!------------------------------------------------------------
Begin-Procedure CanEMail($vendor,:$CanEMail)
    Let $CanEMail = 'N'
    Let $wherevendor = ''''||$vendor||''''
    Begin-Select
                CO5     &email
            Let #isnull = isnull(&email)
            If #isnull <> 1
                Let $CanEMail = 'Y'
            End-If
        from     COMPANIES
        where       COMPANY = [$wherevendor]
    End-Select
End-Procedure

!------------------------------------------------------------
! EndLines
!------------------------------------------------------------
Begin-Procedure EndLines ($ponum, $status)
    If #POTOTCOST = 0 and $status='WAPPR'
        Print 'PO totalcost is 0.00 - Status set to WAPPR' (+1,5)
    Else
        Print {Statusset} (+1,5)
        Print ' ' (,+1)
        Print $status (,+1)
    End-If

    If $status <> 'MINVAL' and $_curpostatus = 'MINVAL'
        Print {MinvalMsg} (+1,5)
    End-If

End-Procedure

