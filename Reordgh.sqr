!--------------------------------------------------------
!  FILENAME     : Reordgh.sqr
!  AUTHOR       : Alan Stevens (BPD Consulting Ltd)
!  DATE         : 20/11/2001
!--------------------------------------------------------
!  DESCRIPTION  : Reorder Report - Consolidated version for use by Grangemouth and Hull.
!--------------------------------------------------------
!  MODIFICATION   HISTORY
!  DATE           INITIALS      NOTES
!  03/01/2002     AS            Added include file Input.h as requested, therefore needed to $Schema to
!                               prefix the tables
!  22/04/2002     BH            AmEnded the program to look at all entries in the INVENTORY table for the warehouse
!                               entered. Only STK and non outside items are included. The program then works out
!                               how many items are on an outstanding PR, PO or reserved on a workorder. It then
!                               checks to see If CURBAL - Qty reserved on workorders is less then MINLEVEL (This
!                               has got to be > zero. It then uses the following calculation to work out the
!                               reorder quantity.
!                               MAXLEVEL - QTY on PR - QTY on PO - CURBAL + QTY reserved on Workorders.
!
!                               2 extra variables have been added to MAXVARS PURCH_GROUP,REORDER_WONUM
!                               BASECURRENCY1 is used for the default currency
!
!                               Glcontrolacc is got frpm locations for the warehouse
!                               Internal contact & phone number are got from labor for the user running report
!
!                               The program creates WAPPR PR's for each Vendor to be ordered for. The section to
!                               create PO's is not called at present. This includes the UPD_TOTAL and Update
!                               procedures
!
!                               The price used is the LASTCOST unless there is a current price agreement. If there
!                               is the unit price is used from it. The agreement number and PA number are
!                               Printed on the report
!   12/08/2002    APC           Added inspection required flag to be transferred
!   17/09/2002    BH            Changed the search on PR,PO and Workorder to use maxvalue of status from valuelist
!   12/03/2003    CAA           Included column for inspection items, Prints Y If receiptscomplete = N,
!                               inspectionrequired = Y and status not COMP or CLOSE.
!   12/03/2003    CAA           AmEnded Wo_check and initialise prqty to zero.
!   28/01/2004    CAA           USE PRICE AGREEMENTS THAT ARE APPROVED OR Print STATUS ONLY - REMEDY 000452195 (same as REMEDY 000450935)
!   18/02/2004    CAA           Remedy 000454667 - calculate tax fro line) and REMEDY 000452195
!                               (get latest price agreement number as INVENTORY.il1 is not always Updated)
!   26/02/2004    JM            Make sure that the exchangerate is always Set to 1 for GBP PRs
!   24/03/2004    CAA           Add prompt and search for ROI, ROR or Both, Remedy Call 000459289
!   24/03/2004    CAA           Add column in4 (respnsile person) Remedy - 000460302 (Printed where PANUM used to be Printed)
!   17/05/2004    JM            Stock Type of WASTE has been added to Maximo as part of WS157. These items are similar
!                               to REDSTK in that they should not be reordered but they can be issued until the existing stock
!                               has been used.
!   30/07/2004    CAA           Remedy Call 000476963 (added in19 column to report)
!   27/08/2004    CAA           Take into account qty on RFQ - Remedy call - 000476559
!   02/12/2004    AN            Use modified algorithm for RFQ qty - Remedy call - 476559
!   08/12/2004    RSC           Modifications for WS137.
!   09/12/2004    RSC           Consolidated REORDERG report for use at Hull and Grangemouth. Require maxvar REORDERFORMAT, Set to H for Hull.
!   16/12/2004    RSC           Minor change to fix problem If received is more than ordered qty.
!   18/01/2005    RSC           Adding Workflow functionality. WS137
!                               Note WORKFLOW functionality requires the following MAXVARS: PR_WF_REVISION, PR_WF_NODEID, PR_WF_PROCESSID
!                               ******Note. Need to grant insert, Update rights on wfcallstack, wfinstance and wfassignment
!   28/01/2005    RSC           Add ability to reorder for 3 storerooms at once.
!   11/02/2005    RSC           Add MINVAL functionality.
!   01/04/2005    RSC           Problems fixed. Tested by Alan Jack.
!   04/05/2005    RSC           Resolved problems with RESPASSet and DebitGLCode.
!   03/10/2005    A Newman      Remedy 43719 - Change Max to Min for required delivery dates
!   19/07/2006    A Newman      Remedy 102586 - Remove filter on disabled companies
!   01/09/2006    N Rhodes      Remedy 80005 - Added tax amount to loaded cost on prline to fix header cost
!   09/07/2007    R Nunn        Remedy Call 152666 - Add item criticality to report
!   13/12/2007    R Nunn        Remedy Call 162630 - Correct exchange rate / currencycode
!   28/11/2008    R Nunn        footPrint 37373 tax code change from 'GM' to 'G4'
!   18/11/2009    R Nunn        footPrint 69505 Change PO FAST TRACK = NO and (ITEM.in15 is null or (ITEM.in15 not in('Y', 'N')))
!   30/11/2010    G Stephen     Project Wales - VAT Changes to 'AZ'
!   05/04/2013    Siddhartha    For call 193198 supvervisor has been amEnded from STEVEN BOYLE to Robert Hamilto
!   18/04/2021    G Bishop      Beautified code for documentation - note: these will not compile
!--------------------------------------------------------

!--------------------------------------------------------
! Setup
!--------------------------------------------------------
Begin-Setup
    #Define Arial               4
    #Define Courier             3
    #Define Times               5
    #Define MinvalMsg           'Note that previous status was MINVAL'
    #Define RepName             'REORDER.SQT'
    #Define StatusSet           'Status Set to '

    Declare-Report Reorder
        Layout = A4_paper_landscape
        PrinterType = HPLASERJET
    End-Declare

    Declare-Layout A4_paper_landscape
        orientation =landscape
        Paper-Size =(11.69,8.27)
        Left-Margin =.12
        Right-Margin =.12
        Top-Margin = .3
        Bottom-Margin = .25
    End-Declare

    Declare-Printer HP-definition
        Type = HPLASERJET
        Font = 3
        Point-Size = 10
    End-Declare

    Declare-Image logo
        Type = BMP-FILE
        Image-Size = (8,3)
        Source = 'logo.bmp'
    End-Declare

End-Setup

#Define Notusedprompt       'Parameter not used.  Press enter to continue'
#Define Schemaprompt        'Insert schema name'
#Define whereprompt         'Insert where clause'
#Define targetlanguage  ENG
#Define p1Type 'CHAR'
#Define p2Type 'N/A'
#Define p3Type 'N/A'
#Define p4Type 'N/A'
#Define p1prompt 'ENTER I = ROI, R = ROR, B = BOTH'
#Define p2prompt 'ENTER FIRST WAREHOUSE TO REORDER FOR'
#Define p3prompt 'ENTER SECOND WAREHOUSE TO REORDER FOR'
#Define p4prompt 'ENTER THIRD WAREHOUSE TO REORDER FOR'
#Include 'Input.h'

!--------------------------------------------------------
! Heading
!--------------------------------------------------------
Begin-Heading 8
    Print-Image logo (1,100)
    Alter-Printer Font = {Arial} Point-Size = 10
    Print 'Date : '                        (1,1)   BOLD
    Print &today                           (,6)    BOLD
    Alter-Printer Font = {Arial} Point-Size = 12
    Print 'REORDER REPORT DETAILS'         (+2,40) BOLD
    Print 'Warehouses:'                     (+1,1)  BOLD

    Let $warehouses= $storeroom1

    If $storeroom2<>''
        Let $warehouses=$warehouses|| ', ' || $storeroom2
        If $storeroom3<>''
            Let $warehouses=$warehouses || ', ' || $storeroom3
        End-If
    Else
        If $storeroom3<>''
            Let $warehouses=$warehouses|| ', ' || $storeroom3
        End-If
    End-If

    Print $WAREHOUSES                       (,13) bold

    graphic                                 (+1,1,110) horz-line

    Alter-Printer Font = {Arial} Point-Size = 8
    Print 'Item'                            (+1,1)  BOLD
    Print 'Last inv'                        (,51)   BOLD
    Print 'Last'                            (,57)   BOLD
    Print 'PO'                              (,66)   BOLD
    Print 'RA'                              (,82)   BOLD

    //TODO: Find out what reportformat = 'H' PA/CB Means

    If $reportformat = 'H'
        Print 'PA'                          (,78)   BOLD
    Else
        Print 'CB'                          (,78)   BOLD
    End-If
    Print 'Order'                           (,86)   BOLD
    Print 'Last'                            (,92)   BOLD
    Print 'PR'                              (,98)   BOLD
    Print 'Number'                          (+1,1)  BOLD
    Print 'Description'                     (,10)   BOLD

    //TODO: Find out what reportformat = 'H' INSP/STAT Means

    If $reportformat = 'H'
        Print 'INSP'                        (,35)   BOLD
    Else
        Print 'STAT'                        (,35)   BOLD
    End-If
    Print 'Quantity'                        (,44)   BOLD
    Print 'Price'                           (,51)   BOLD
    Print 'Value'                           (,57)   BOLD
    Print 'Date'                            (,66)   BOLD
    Print 'Vendor'                          (,72)   BOLD

    //TODO: Find out what reportformat = 'H' No Means
    If $reportformat = 'H'
        Print 'No.'                         (,80)   BOLD
    End-If
    Print 'approval'                        (,85)   BOLD
    Print 'Issued'                          (,92)   BOLD
    Print 'No.'                             (,98)   BOLD
    Print 'C'                               (,108)  BOLD
    graphic                                 (+1,1,110) horz-line
    Alter-Printer Font = {Arial} Point-Size = 8
End-Heading

!--------------------------------------------------------
! Begin-Program
!--------------------------------------------------------
Begin-Program
    create-array name=pr_array size=400
    field=prnum:char = ''
    Let #arraycount=0
    Let #line = 1
    Let #mrfirst = 1
    Let #counter = 0
    Let #created = 0
    Let $internalcontact = ''
    Let $internalphone = ''
    Let #records=0
    Let #totqty=0
    Let #totvalue=0

    Do Get-Input
    Do Check-Input          !Input $p5 {p5prompt}

    Let $userok = 'Y'
    If Upper($USERNAME) <> 'MAXIMO' and Upper($USERNAME)<> 'SYSADM'
        Let $report_name = 'REORDER'
        Do User_Check
    End-If

    If $userok = 'N'
        Let $Print = $username||' cannot run this report'
        Print $Print        (+5,10)
        Stop quiet
    End-If

    Do GetPurchGroup
    Do GetReportFormat
    Do GetDllFlagsValues
    Do ReOrder
    Do Date
    Do Labour_Get                               !find internal contact and phone number from labor
    Do WONum_Get                                !get default wonum
    Do Default_Currency_Get                     !get default currency
    Do Main                                     !order items which have fallen under minlevel requires STOCK

    If #records > 0
        Do CalculateStatus                      !Calculates the status of the last po added and Prints a line
    End-If

    graphic                                 (+1,42,7)   horz-line
    graphic                                 (,58,7)     horz-line
    Print #totqty                           (+1,42)     edit 99999999.99
    Print #totvalue                         (,58)       edit 99999999.99
    graphic                                 (,42,7)     horz-line
    graphic                                 (,58,7)     horz-line
    Print 'Total number of items Printed'   (+2,1)
    Print #records                          (,30)       edit 99999

End-Program

!--------------------------------------------------------
! GetPurchGroup
!--------------------------------------------------------
Begin-Procedure GetPurchGroup
    Begin-Select
                VARVALUE    &purchGroup / $purchasegroup
        from    MAXVARS
        where   VARNAME = 'PURCH_GROUP'
    End-Select
End-Procedure

!--------------------------------------------------------
! GetReportFormat
!--------------------------------------------------------
Begin-Procedure GetReportFormat
    Begin-Select
                VARVALUE &reportformat / $reportformat
        from    MAXVARS
        where   VARNAME = 'REORDERFORMAT'
    End-Select
End-Procedure

!--------------------------------------------------------
! Check-Input
!--------------------------------------------------------
Begin-Procedure Check-Input
    Let $Storeroom1 = Upper($P2)
    Let $Storeroom2 = Upper($P3)
    Let $Storeroom3 = Upper($P4)

    If ($where = '' or $where = '*')
        Let $where = '1=1'
    End-If

    While 1=1
        UpperCase $P1
        Let $Itemin5 = Upper($P1)
        If $Itemin5 = 'I'
            Let $ROIROR = ' and ITEM.IN5 = '||'''ROI'''||''
            Break
        End-If
        If $Itemin5 = 'R'
            Let $ROIROR = ' and ITEM.IN5 = '||'''ROR'''||''
            Break
        End-If
        If $Itemin5 = 'B'
            Let $ROIROR = ' and ITEM.IN5 IN ('||'''ROI'''||','||'''ROR'''||')'
            Break
        End-If

        Input $P1  'ENTER I = ROI, R = ROR, B = BOTH'

        UpperCase $P1

    End-While

End-Procedure

!--------------------------------------------------------
! Reorder - Clear out reorder table
!--------------------------------------------------------
Begin-Procedure Reorder
    Let $errplace='Error in Reorder : Delete From Reorder'

    Begin-Sql on-error=SQL_Error
        Delete from [$Schema]Reorder;
    End-Sql
    commit

End-Procedure

!--------------------------------------------------------
! Date - Gets Date 6 months ago from today
!--------------------------------------------------------
Begin-Procedure Date
    Begin-Sql
        Alter session Set nls_date_format = 'DD-MON-YYYY';
    End-Sql

    Begin-Select
                To_Char(SYSDATE,'DD-Mon-YYYY')      &today
                add_months(trunc(SYSDATE),-6)       &Date / $Date
        from    DUAL
    End-Select
End-Procedure

!--------------------------------------------------------
! GLAcc_Get - Get the gldebitaccnt from the locations file for the warehouse entered
!--------------------------------------------------------
Begin-Procedure GLAcc_Get
    Let $glcontrolacc = ' '

    Begin-Select
                LOCATIONS.CONTROLACC      &controlacc / $glcontrolacc
                LOCATIONS.DESCRIPTION     &locdesc
        from    LOCATIONS
        where   LOCATION = $location_temp
    End-Select
End-Procedure

!--------------------------------------------------------
! Labour_Get - Get the internal phone number and location
!--------------------------------------------------------
Begin-Procedure Labour_Get
    Begin-Select
              LABOR.NAME     &laborname / $internalcontact
              LABOR.CALLID   &phonenum / $internalphone
        from  LABOR
        where Upper(LABORCODE) = Upper($username)
    End-Select
End-Procedure

!--------------------------------------------------------
! Get the workorder number
!--------------------------------------------------------
Begin-Procedure WONum_Get
    Begin-Select
                MAXVARS.VARVALUE    &prwonum / $prwonum
        from    MAXVARS
        where   VARNAME = 'REORDER_WONUM'
    End-Select
    Let $prwonum = ''
End-Procedure

!--------------------------------------------------------
! Default_Currency_Get - Get the default currency
!--------------------------------------------------------
Begin-Procedure Default_Currency_Get
    Let $default_currency = 'GBP'
    Begin-Select
                MAXVARS.VARVALUE    &currency / $default_currency
        from    MAXVARS
        where   VARNAME = 'BASECURRENCY1'
    End-Select
End-Procedure

!--------------------------------------------------------
! Main
!--------------------------------------------------------
Begin-Procedure Main

    Let $lastVendor = '*'
    Let $lastrespasSet = '*'
    Let #itemld=0
    Let $ldtable = 'ITEM'
    Let $ldfield = 'DESCRIPTION'

    If $ITEMIN5  = 'B'                !PROCESSES ROI and ROR SEPERATELY
        Let $ITEMIN5 = 'I'
        Let $ROIROR = ' and ITEM.IN5 = '||'''ROI'''||''
        Let $ORDERBYCLAUSE = 'Nvl(INVENTORY.Vendor,''ZZZZZZ''), INVENTORY.itemnum'

        Do Main_SQL

        Let $ITEMIN5 = 'R'
        Let $ROIROR = ' and ITEM.IN5 = '||'''ROR'''||''
        Let $ORDERBYCLAUSE = 'Nvl(INVENTORY.Vendor,''ZZZZZZ''), ITEM.IN4, INVENTORY.itemnum'

        Do Main_SQL

        Let $ITEMIN5 = 'B'
    Else
        Let $ORDERBYCLAUSE = 'Nvl(INVENTORY.Vendor,''ZZZZZZ''), INVENTORY.itemnum'
        Do Main_SQL

    End-If

End-Procedure   !Main

!--------------------------------------------------------
! Main_SQL
!--------------------------------------------------------
Begin-Procedure Main_SQL

    Begin-Select
                INVENTORY.ITEMNUM                           &itemnum / $itemnum
                INVENTORY.MINLEVEL                          &minlevel
                INVENTORY.MAXLEVEL                          &maxlevel
                INVENTORY.LOCATION                          &location  / $location_temp
                nvl(INVENTORY.VENDOR,'ZZZZZZ')              &Vendor
                INVENTORY.ORDERQTY                          &orderqty
                ITEM.DESCRIPTION                            &itemdesc
                ITEM.INSPECTIONREQUIRED                     &inspectionrequired
                ITEM.LDKEY                                  &itemld
                INVENTORY.MANUFACTURER                      &manufacturer
                INVENTORY.MODELNUM                          &modelnum
                INVENTORY.CATEGORY                          &category
                INVENTORY.CATALOGCODE                       &catcode
                INVENTORY.ORDERUNIT                         &orderunit - if isnull($orderunit) then $orderunit='EA'
                INVENTORY.LASTCOST                          &lastcost
                INVENTORY.CONVERSION                        &conversion
                (INVENTORY.ORDERQTY * INVENTORY.LASTCOST)   &total
                INVENTORY.LASTISSUEDATE                     &lastissuedate
                INVENTORY.IL1                               &il1 / $agreementno
                ITEM.IN5                                    &in5 / $orderapproval
                ITEM.IN4                                    &in4 / $respasSet
                ITEM.IN3                                    &in3 / $criticality
                ITEM.IN19                                   &in19 / $in19
                INVENTORY.DELIVERYTIME                      &deliverytime / #deliverytime

            Let #woqty=0
            Do GLAcc_Get


            If #maxlevel > 0 or #woqty>0
                Do CurBal
            End-If

        from    INVENTORY,
                ITEM
        where   INVENTORY.ITEMNUM = ITEM.ITEMNUM
        and     INVENTORY.CATEGORY = 'STK'
        and     ITEM.OUTSIDE<>'Y'
        and (   ITEM.STOCKTYPE not in ('REDSTK', 'WASTE') or ITEM.STOCKTYPE is null)
        and (   ITEM.IN22 is null or trunc(SYSDATE) > trunc(ITEM.IN22))
        and (   INVENTORY.LOCATION = $Storeroom1
        or      INVENTORY.LOCATION = $storeroom2
        or      INVENTORY.LOCATION = $storeroom3)
                [$ROIROR]
        and (   ITEM.IN15 is null or (ITEM.IN15 not in('Y', 'N')))
        order By [$ORDERBYCLAUSE]

    End-Select

End-Procedure

!--------------------------------------------------------
! CurBal - Check the Current balance of the items against their minimum level
!--------------------------------------------------------
Begin-Procedure CurBal
    Begin-Select
                Sum(CURBAL)          &fcurbal
            move &minlevel to #min
            move &fcurbal to #fcurbal

            If (#fcurbal - #woqty) <= #min                                                                  !Current balance less reserved below minimum level or items from work orders to be ordered
                move #fcurbal to #qty
                Let #poqty=0
                Let #prqty=0
                Let #rfqqty=0

                Do RFQ_Check
                Do PR_Check

                If #rfqexists = 1
                    Let #rfq-pr-qty = #rfqqty
                    add #rfqqty to #qty
                Else
                    Let #rfq-pr-qty = #prqty
                    add #prqty to #qty
                End-If

                Do PO_Check

                Let #orderqty=0                                                                                 ! If curbal + quantity on rfq's, pr's and po's still below the minimum reorder it
                Let #orderqty = (#maxlevel - #poqty - #totalinspqty - #prqty - #rfqqty - #fcurbal + #woqty)     ! add the quantity from the work order to the quantity to order total inspection quantity also taken into account now. RCooke.

                If #conversion=0
                    Let #conversion=1
                End-If

                Let #orderqty_converted=round(((#orderqty/#conversion)-0.5),0)

                If #orderqty_converted<0
                    Let #orderqty_converted=0
                End-If

                If (#qty - #woqty) <= #min and #orderqty >0                                                     ! Current balance - reserved + quantities on PR's and PO's still below minimum level or items from work orders to be ordered Quantity to be ordered has to be greater than 0
                    If $Vendor                                                                                  ! = 'ZZZZZZ'  Vendor is not null
                        Let $tax1code = 'AZ'                                                                    ! Project Wales VAT Changes
                        Let $currencycode=$default_currency
                        Let #exchangerate=0
                        Let $exchangedate = ''
                        Let $priceflag = 'N'                                                                    ! Is the item on a proce agreement'

                        Do Price_Check                                                                          ! Find out If there is a price agreement for the item for this Vendor
                        Do Companies                                                                            ! Find out If Vendor is valid and then create he POline for the item

                        move $Vendor to $lastVendor
                        move $respasSet to $lastrespasset
                        move $prnumins to $lastprnumins

                    Else                                                                                        ! Vendor is null
                        If $lastVendor <> '*' and $lastVendor <> 'ZZZZZZ'
                            Do CalculateStatus                                                                  ! Set status for previous order This wont run If there is only one Vendor, as it will be *
                        End-If

                        Let $tax1code = 'AZ'
                        Let $currencycode=$default_currency
                        Let #exchangerate=0
                        Let $exchangedate = ''
                        Let $contract = ''

                        Do Null_Vendor                                                                          ! Create a PR for a null Vendor

                        move 'ZZZZZZ' to $lastVendor

                    End-If
                End-If
            End-If
        from    INVBALANCES
        where   ITEMNUM = $itemnum
        and     LOCATION = $location
    End-Select
End-Procedure   !Curbal

!------------------------------------------------------------
! Counts number of inspection items in status WAPPR
!------------------------------------------------------------
Begin-Procedure INSP_Count
    Begin-Select
                Sum(QUANTITY)       &inspqty / #inspqty
        from    MATRECTRANS
        where   ITEMNUM = $itemnum
        and     STATUS = 'WAPPR'
        and     ISSUETYPE = 'RECEIPT'
        and     PONUM = $ponumnis
        and     POLINENUM = $poline_num
    End-Select
End-Procedure

!--------------------------------------------------------
! RFQ_Check - Checks If the items retieved are already on RFQ
!--------------------------------------------------------
Begin-Procedure RFQ_Check
    move 0 to #rfqexists
    move 0 to #prqty
    Begin-Select
                nvl(Sum(RFQLINE.CONVERSION*RFQLINE.ORDERQTY),0)     rfqqty
        move 1 to #rfqexists
        move &rfqqty to #rfqqty         ! add #rfqqty to #qty
        from    RFQLINE RFQLINE,
                RFQ RFQ
        where   RFQLINE.ITEMNUM = $itemnum
        and     RFQ.RFQNUM = RFQLINE.RFQNUM
        and     RFQ.STATUS in ('INPRG','READY','Print')
        and     RFQLINE.PONUM is null
        and     RFQLINE.STORELOC = $location_temp
    End-Select
End-Procedure   ! RFQ_Check

!--------------------------------------------------------
! PR_Check - Checks If the items retieved are already on Purchase Request
!--------------------------------------------------------
Begin-Procedure PR_Check
    move 0 to #prexists
    move 0 to #prqty

    Begin-Select
                Sum(PRLINE.CONVERSION * PRLINE.ORDERQTY) &prqty
            move 1 to #prexists
            move &prqty to #prqty

        from    PRLINE PRLINE,
                PR PR
        where   PRLINE.ITEMNUM = $itemnum
        and     PR.PRNUM = PRLINE.PRNUM
        and (   PR.STATUS in (  select  VALUE
                                from    VALUELIST
                                where   LISTNAME = 'PRSTATUS'
                                and     MAXVALUE in ('WAPPR','APPR'))
        or      PR.STATUS = 'MINVAL')
        and     PRLINE.PONUM is null
        and     PRLINE.RFQNUM is null               ! If there is an associated rfq then ignore the pr
    End-Select
End-Procedure   ! PR_Check

!--------------------------------------------------------
! PO_Check - Checks If the items retrieved are already on Purchase Order
!--------------------------------------------------------
Begin-Procedure PO_Check

    move 0 to #totalinspqty
    move 0 to #poexists
    move 0 to #poqty
    move 0 to #qty

    Begin-Select
                POLINE.PONUM                            ponumnis
                POLINE.CONVERSION                       poconv
                (POLINE.ORDERQTY-POLINE.RECEIVEDQTY)    poordr_rec
                PO.STATUS                               status / postatus
                POLINE.RECEIPTSCOMPLETE                 receiptscomplete
                POLINE.INSPECTIONREQUIRED               insp_required
                POLINE.POLINENUM                        poline_num

            If &insp_required = 'Y'
                Do INSP_Count
                Let #totalinspqty=#totalinspqty+#inspqty
            End-If

            move &ponumnis to $ponumins
            move 1 to #poexists
            move 0 to #poqty

            Let #poconv = &poconv

            move &poordr_rec to #poordr_rec

            If #poordr_rec<0
                Let #poordr_rec=0
            End-If

            Let #poqty = #poconv * #poordr_rec
            add #poqty to #qty

        from    POLINE,
                PO
        where   PO.PONUM = POLINE.PONUM
        and     POLINE.ITEMNUM = $itemnum
        and     PO.POTYPE <> 'PRICE'
        and     PO.STATUS in (   select  VALUE
                                from    VALUELIST
                                where   LISTNAME = 'POSTATUS'
                                and     MAXVALUE in ('WAPPR','APPR','Print','FAX','EMAIL') )
    End-Select

    Let #poqty=#qty
End-Procedure

!--------------------------------------------------------
! Price_Check - Find out If item is on a current price agreement. If so use the unitcost
!--------------------------------------------------------
Begin-Procedure Price_Check
    Let $contract = ''
    Let $panum = ''
    Let $agreementpoType = ''

    Begin-Select
                PO.PONUM                                                        &panum / $panum
                POLINE.UNITCOST                                                 &CHECKLASTCOST
                PO.PO8                                                          &contract
                PO.CURRENCYCODE                                                 &pricecurrency
                PO.EXCHANGERATE                                                 &pricerate
                PO.STATUS                                                       &status1 / $postatus
                POLINE.RECEIPTSCOMPLETE                                         &receiptscomplete1 / $receiptscomplete
                To_Char(PO.EXCHANGEDATE,'DD-MON-YYYY')                          &pricedate

            move &CHECKLASTCOST TO #LASTCOST

            Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)     ! Remedy 000454667

            move &contract to $contract
            Let $currencycode=&pricecurrency
            Let #exchangerate=&pricerate
            Let $exchangedate=&pricedate
            Let $priceflag = 'Y'

        from    POLINE,
                PO
        where   PO.PONUM = POLINE.PONUM
        and     POTYPE = 'PRICE'
        and     POLINE.ITEMNUM = $itemnum
        and     PO.VENDOR = $Vendor
        and     PO.STATUS in (  select  VALUE
                                from    VALUELIST
                                where   LISTNAME = 'POSTATUS'         ! *** CAA - USE PRICE AGREEMENTS THAT ARE APPROVED OR Print STATUS ONLY ***
                                and     MAXVALUE in ('APPR','Print'))
        and     ((trunc(SYSDATE) >= trunc(PO.STARTDATe))
        and     (trunc(SYSDATE) <= trunc(PO.ENDDATE)))
    End-Select

    If $panum != ''
        Let $agreementpoType = 'PRICE'
    Else
        Let $agreementpoType = ''
    End-If
End-Procedure

!--------------------------------------------------------
! Companies
!--------------------------------------------------------
Begin-Procedure Companies
    move 0 to #found
    If $Vendor <> $lastVendor                                                                               ! next bit added with minval.....
        If $lastVendor <> '*'
            Do CalculateStatus
        End-If

        Let $tax1code = 'AZ'                                                                                ! Project Wales - VAT Changes
        Let $currencycode=$default_currency
        Let #exchangerate=0
        Let $exchangedate = ''
        Let $exchangecurrent = 'Y'                                                                          ! Flag to say If currency is current

        Begin-Select
                    c.COMPANY               newcompany
                    c.CONTACT               contact
                    c.FREIGHTTERMS          freightterms
                    c.NAME                  company
                    Nvl(c.TAX1CODE,'AZ')    tax1code                                                                ! Project Wales - VAT Changes

                Do Find_Tax

                    c.CURRENCYCODE          &currencycode

                move &tax1code to $tax1code
                move &currencycode to $currencycode
                move &freightterms to $freightterms
                Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)

                If $currencycode <> 'GBP'                                                                       ! If currency code of Vendor is not Sterling locate the exchange rate and expiry Date from EXCHANGE

                    Do Currency_Get

                    If #exchangerate =0
                        Let #exchangerate = 1
                    End-If

                    If StrToDate(&today,'DD-MON-YYYY') > StrToDate($exchangedate,'DD-MON-YYYY')                 ! If expiry Date of currency is past flag it. Do not order for the Vendor
                        Let $exchangecurrent = 'N'
                    End-If

                    If $priceflag = 'N' and $currencycode<>'GBP' and #exchangerate<>0                           ! If not on a price agreement and not GBP convert the unit cost
                        Let #lastcost = (#lastcost * #exchangerate)
                        Let #lastcost = round(#lastcost,2)
                        Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)
                    End-If
                End-If

                move &currencycode to $currencycode

                Let $LASTPODATE = ''

                Do PODate_Get

                move &company to $Vendorname
                If ($newcompany <> $lastVendor ) or ($respasSet <> $lastrespasset)                              ! $lastVendor was previous Vendor
                    Let #count = 1
                Else
                    Let #Count = 0
                End-If

                If $exchangecurrent = 'Y'
                    Do MinValPR

                    If $minvalpr <> 'NONE'
                        Let $prnumins = $minvalpr
                        Do Update_MinVal_Line                                                                   ! If a line already exists for the item then add it to the line.

                        If $insertnewline = 'Y'                                                                 ! otherwise add a new line.
                            Do GetNextPRLine
                            Do Build_PRline
                        End-If
                    Else
                        Let #line = 1
                        Do Build_PR
                        Do Build_PRline
                    End-If

                Else
                    Do Print_NotOrdered

                End-If
            from        COMPANIES c
            where       c.COMPANY = $Vendor

        End-Select

    Else
        Let #lastcost = round(#lastcost,2)
        Let #tax1 = round((((#lastcost*#orderqty)/100)*#taxrate),2)                                         ! was orderqty_converted

        If $exchangecurrent = 'Y'

            Do MinValPR

            If $minvalpr <> 'NONE'
                Let $prnumins = $minvalpr
                Do Update_MinVal_Line                                                                       ! If a line already exists f    or the item then add it to the line.
                If $insertnewline = 'Y'                                                                     ! otherwise add a new line.
                    Do GetNextPRLine
                    Do Build_PRline
                End-If

            Else

                Do GetNextPRLine-Normal
                Do Build_PRline

            End-If
        Else

            Do Print_NotOrdered

        End-If
    End-If
End-Procedure   !Companies

!--------------------------------------------------------
! Find_Tax -  Remedy 000454667 - new procedure to find taxrate
!--------------------------------------------------------
Begin-Procedure Find_Tax
    Let #taxrate = ''
    Begin-Select
                TAXRATE     &taxrate / #taxrate
        from    TAX
        where   TAXCODE = &tax1code
        and     TYPECODE = '1'
    End-Select
End-Procedure

!--------------------------------------------------------
! Null_Vendor
!--------------------------------------------------------
Begin-Procedure Null_Vendor
    move 0 to #found
    Let $exchangecurrent = 'Y'                                                                              ! Flag to say If currency is current
    move $Vendor to $newcompany
    move 'AZ' to $tax1code                                                                                  ! Project Wales VAT Changes

    Begin-Select
                TAXRATE     &taxratenullvEnd / #taxrate
        from    TAX
        where   TAXCODE = 'AZ'                                                                              ! Project Wales - VAT Changes
        and     TYPECODE = '1'
    End-Select

    move 'AZ' to $tax1code                                                                                  ! Project Wales VAT Changes
    Let $LASTPODATE = ''
    Do PODate_Get

    move '*** NO Vendor ***' to $Vendorname
    Let #tax1 = '0'                                                                                         ! Remedy 000454667
    If ($newcompany <> $lastVendor )                                                                        ! $lastVendor was previous Vendor
        Let #count = 1
    Else
        Let #Count = 0
    End-If

    move 1 to #created
    move 1 to #found

    If #found = 1
        If #count = 1                                                                                       ! or #counter=1
            Let #line = 1
            Do Build_PR
            Do Build_PRLine

            move 1 to #created
        Else
            Let #line = #line + 1
            Do Build_PRline

            move 1 to #created
        End-If

    End-If

End-Procedure   ! Null_Vendor

!--------------------------------------------------------
! PODate_Get
!--------------------------------------------------------
Begin-Procedure PODate_Get
    Begin-Select
                LASTDATE        &lastdate / $lastpodate
        from    INVVENDOR
        where   VENDOR= $Vendor
        and     ITEMNUM=$itemnum
    End-Select
End-Procedure

!--------------------------------------------------------
! Currency_Get
!--------------------------------------------------------
Begin-Procedure Currency_Get
    Begin-Select
                EXCHANGERATE                            exchangerate
                To_Char(EXPIREDATE,'DD-MON-YYYY')       expiredate
        from    EXCHANGE
        where   CURRENCYCODETO = 'GBP'
        and     CURRENCYCODE = $currencycode
        Order By EXPIREDATE
    End-Select
End-Procedure

!--------------------------------------------------------
! Build_PR - Build PR header record
!--------------------------------------------------------
Begin-Procedure Build_PR
    Begin-Select
                To_Char(SEED+1)                  prnumins
                PREFIX                           prefix
            Let $prnumins = 'R'||To_Char(#prnumins)
        from    AUTOKEY
        where   TBNAME = 'PR'
    End-Select

    If $Vendor = 'ZZZZZZ'                       ! ReSet Vendor back to null for Printing and inserting into records
        Let $Vendor = ''
    End-If

    Do Supervisor_Get                           ! WS137 - RCooke - Get the Supervisor according to the responsible asset.

    If $orderapproval = 'ROI'                   ! If its an ROI then Set the supervisor to GREGM
        Let $supervisor= 'HAMILTR3'
    End-If
    If $currencycode = 'GBP'                    ! Make sure that the exchange rate is always 1 for GBP PRs
        Let #exchangerate = 1
    End-If

    Let $errplace = 'Error in Build_PR : Insert into PR'

    Begin-Sql on-error=SQL_Error
        Insert into PR (
                        PRNUM,ISSUEDATE,REQUIREDDATE,REQUESTEDBY,
                        VENDOR,CONTACT,CUSTOMERNUM,FOB,FREIGHTTERMS,
                        SHIPVIA,PAYMENTTERMS,SHIPTO,SHIPTOATTN,BILLTO,
                        BILLTOATTN,DESCRIPTION,STATUS,STATUSDATE,CHANGEDATE,
                        CHANGEBY,TOTALCOST,PRIORITY,HISTORYFLAG,PR1,
                        PR2,PR3,PR4,PR5,PR6,
                        PR7,PR8,PR9,PR10,LDKEY,
                        SUPERVISOR,CURRENCYCODE,EXCHANGERATE,EXCHANGEDATE,BUYAHEAD,
                        TOTALTAX1,TOTALTAX2,TOTALTAX3,INCLUSIVE1,INCLUSIVE2,
                        INCLUSIVE3,INTERNAL,TOTALTAX4,TOTALTAX5,INCLUSIVE4,
                        INCLUSIVE5,PAYONRECEIPT,WFID,WFACTIVE,EXCHANGERATE2,
                        SOURCESYSID,OWNERSYSID,EXTERNALREFID,PRLA1,PRLA2,
                        PRLA3,PRLA4,PRLA5,PCARDNUM,PCARDTYPE,
                        PCARDEXPDATE,APISEQ,INTERID,MIGCHANGEID,SENDERSYSID,
                        EXPDONE,PCARDVERIFICATION)
        Values      (   $prnumins,SYSDATE,SYSDATE+7,'MAXIMO',
                        $Vendor,NULL,NULL,NULL,$freightterms,
                        NULL,NULL,$SHIPTO,NULL,$BILLTO,
                        NULL,SubStr($Vendorname,1,34)||' STORES REORDER','WAPPR',SYSDATE,SYSDATE,
                        'MAXIMO',0,3,'N',NULL,
                        'MS','N',SubStr($internalcontact,1,20),$internalphone,$purchasegroup,
                        NULL,$contract,NULL,NULL,NULL,
                        $supervisor,$currencycode,#exchangerate,To_Date($exchangedate,'DD-MON-YYYY'),'N',
                        0,0,0,'Y','Y',
                        'Y','N',0,0,'Y',
                        'Y','N',NULL,'N',NULL,
                        NULL,NULL,NULL,NULL,NULL,
                        NULL,NULL,NULL,NULL,NULL,
                        NULL,NULL,NULL,NULL,NULL,
                        NULL,NULL);

        Update  AUTOKEY Set SEED = SEED+1 where TBNAME = 'PR';               ! Update the seed value for the next one

        Insert into PRSTATUS (PRNUM,STATUS,CHANGEDATE,CHANGEBY,MEMO)
        Values ($prnumins,'WAPPR',SYSDATE,'MAXIMO','Auto Reorder');
    End-Sql

    put $prnumins into pr_array(#arraycount) prnum                          ! Add the PR into the PR array so it can be put into workflow later.
    Let #arraycount=#arraycount+1
End-Procedure   ! Build_PR

!--------------------------------------------------------
! Build_PRline - This value retrived will be copied to the line as PRLINE.POLINEID must match, with POLINE.POLINEID
!--------------------------------------------------------
Begin-Procedure Build_PRline
    move '' to $nextval
    Begin-Select                                                            ! Get the Long text for the Item
                LDTEXT                  &ldtext
        from    LONGDESCRIPTION
        where   LDKEY = #itemld
        and     LDOWNERTABLE = 'ITEM'
        and     LDOWNERCOL = 'DESCRIPTION'
    End-Select

    Let #VLOW=0                                                             ! Find the ldkey
    Let #PLDKEY=0
    Let $ptable = 'PRLINE'
    Let $ptable = 'where LDOWNERTABLE = '||''''||$ptable||''''

    Begin-Select
                TRUNC(LDKEY/100000)*100000 &THERANGE
                COUNT(*)                   &THECOUNT
        move &thecount to #thecount
            If #THECOUNT < 2 and #VLOW <> 0
                Do LDKEY_GET
                If #PLDKEY > 0
                    EXIT-SELECT
                End-If
            Else
            Let #VLOW = #THECOUNT
        End-If
        from    LONGDESCRIPTION
                [$PTABLE]
        GROUP BY TRUNC(LDKEY/100000)*100000
    End-Select

    Let $errplace = 'Error in Build_PRline : Insert into PRLINE'
    Begin-Sql on-error=SQL_Error
        Insert into PRLINE (
                        PRNUM,ITEMNUM,STORELOC,ORDERQTY,
                        ORDERUNIT,UNITCOST,CONVERSION,PONUM,REQDELIVERYDATE,
                        VENDELIVERYDATE,ENTERDATE,ENTERBY,DESCRIPTION,RL1,
                        RL2,RL3,RL4,RL5,LDKEY,
                        WONUM,REQUESTEDBY,ISSUE,WPOPERATION,RLIN1,
                        RLIN2,RLIN3,RLIN4,RLIN5,EQNUM,
                        CHARGESTORE,GLDEBITACCT,GLCREDITACCT,LINECOST,TAX1CODE,
                        TAX1,TAX2CODE,TAX2,TAX3CODE,TAX3,
                        SCHARGECODE,RECEIPTREQD,MANUFACTURER,MODELNUM,CATALOGCODE,
                        TAX4CODE,TAX4,TAX5CODE,TAX5,PRLINENUM,
                        POLINENUM,CATEGORY,REMARK,SERVICE,LOCATION,
                        LOADEDCOST,PRORATESERVICE,AGREEMENTPONUM,AGREEMENTPOTYPE,CONVERTTORFQ,
                        RFQNUM,RFQLINENUM,INSPECTIONREQUIRED,RFQLINEID,POLINEID,
                        LINECOST2,MRNUM,MRLINENUM,RL6,RL7,
                        RL8,RL9,RL10,RLIN6,RLIN7,
                        RLIN8,RLIN9,PRLALN1,PRLALN2,PRLALN3,
                        PRLALN4,PRLALN5,PCARDNUM,PCARDTYPE,PCARDEXPDATE,
                        FINCNTRLID,PCARDVERIFICATION,MKTPLCITEM,VENDORPACKCODE, VENDORPACKQUANTITY,
                        VENDORWAREHOUSE)
        Values          (
                        $prnumins,$itemnum,$location,#orderqty,
                        $orderunit,#lastcost,1,NULL,SYSDATE+#deliverytime,
                        NULL,SYSDATE,'MAXIMO',$itemdesc,NULL,
                        NULL,NULL,NULL,NULL,#pldkey,
                        $prwonum,'MAXIMO','N',NULL,NULL,
                        NULL,NULL,NULL,NULL,NULL,
                        'N',$glcontrolacc,NULL,(#lastcost*#orderqty),$tax1code,
                        #tax1,NULL,0,NULL,0,
                        NULL,'Y',$manufacturer,$modelnum,$catcode,
                        NULL,0,NULL,0,#line,
                        NULL,'STK',NULL,'N',$location,
                        (#lastcost*#orderqty)+#Tax1,'N',$panum,$agreementpoType,'N',
                        NULL,NULL,$inspectionrequired,NULL,$nextval,
                        0,NULL,NULL,NULL,NULL,
                        NULL,NULL,'28000',NULL,NULL,
                        NULL,NULL,NULL,NULL,NULL,
                        NULL,NULL,NULL,NULL,NULL,
                        NULL,NULL,'N',NULL,NULL,
                        NULL);
    End-Sql

    Let $errplace = 'Error in Build_PRline : Insert into PRLINE longdescription'
    Begin-Sql on-error=SQL_Error
        insert into LONGDESCRIPTION (LDKEY,LDOWNERTABLE,LDOWNERCOL,LDTEXT)
        Values (#pldkey,'PRLINE','DESCRIPTION',&ldtext);
    End-Sql

    Let $errplace = 'Error in Build_PR : Update PR total cost'
    Begin-Sql on-error=SQL_Error            ! Update the totalcost on the PR header with the sum of the lines
        Update PR Set TOTALCOST = (select Nvl(Sum(LOADEDCOST),0) from PRLINE where PRNUM = $prnumins)
        where prnum = $prnumins;
    End-Sql



    Let $errplace = 'Error in Build_PRLine : Insert into Reorder'
    Begin-Sql on-error=SQL_Error        ! Build reorder record
        Insert into REORDER (ITEMNUM,LOCATION,VENDOR,MINLEVEL,
                            MAXLEVEL,CATEGORY,ROTATING,ORDERQTY,ORDERUNIT,
                            COST,CONVERSION,IN19,IN20,IN21,
                            IN22,IN23,CURBAL,WONUM,REQUIREDATE,
                            REQUESTBY,SCHEDSTART,TARGSTARTDATE,WPOPERATION,GLACCOUNT,
                            DELIVERYTIME,LOTTYPE,MANUFACTURER,MODELNUM,CATALOGCODE,
                            CONTROLACC,EQNUM,EQLOCATION,RESERVEDQTY,PRQTY,
                            POQTY,MRNUM,MRLINENUM,SERVICE,SCHARGECODE,
                            IN24,IN25,IN26,IN27,REORDERQTY,
                            AGREEMENTPONUM,AGREEMENTPOTYPE,PAYONRECEIPT,CURRENCYCODE)
        Values              ($itemnum,$location,$Vendor,#minlevel,
                            #maxlevel,'cat',NULL,#orderqty,$orderunit,
                            #lastcost,$conversion,NULL,NULL,NULL,
                            NULL,$ponum,#fcurbal,NULL,SYSDATE+7,
                            'MAXIMO',NULL,NULL,NULL,$glcontrolacc,
                            NULL,NULL,$manufacturer,$modelnum,$catcode,
                            NULL,NULL,NULL,NULL,NULL,
                            NULL,NULL,NULL,NULL,NULL,
                            NULL,NULL,NULL,NULL,NULL,
                            $panum,$agreementpoType,NULL,NULL);
    End-Sql

    Do PrintPO

End-Procedure   ! PRLINE

!--------------------------------------------------------
! WO_Check - Not used
!--------------------------------------------------------
Begin-Procedure WO_Check
    Begin-Select
                INVRESERVE.RESERVEDQTY          woreserved
                INVRESERVE.ACTUALQTY            woactual

        Let #woqty = #woqty + (#woreserved)

        from    WORKORDER,
                INVRESERVE
        where   INVRESERVE.ITEMNUM = $itemnum
        and     INVRESERVE.WONUM = WORKORDER.WONUM
        and     WORKORDER.STATUS in (   select  VALUE
                                        from    VALUELIST
                                        where   LISTNAME = 'WOSTATUS'
                                        and     MAXVALUE in ('APPR'))
    End-Select
End-Procedure

!--------------------------------------------------------
! Upd_Total-  Not used
!--------------------------------------------------------
Begin-Procedure Upd_Total
    Let $errplace = 'Error in uPD_TOTAL  : SELECT THEN Update'
    Begin-Select
                PONUM                   &ponumins1
          Do Update

        from    PO
        where   DESCRIPTION like '%STORES REORDER%'
        and     To_Date(STATUSDATE,'DD-MON-YYYY') =  To_Date(SYSDATE,'DD-MON-YYYY')
    End-Select
End-Procedure   ! Upd_Total

!--------------------------------------------------------
! Update - badly named
!--------------------------------------------------------
Begin-Procedure Update
    Let $errplace = 'Error in Update : Update PO Set totalcost'
    Begin-Sql on-error=SQL_Error
        Update PO Set TOTALCOST = ( select   Sum(LOADEDCOST) + Sum(TAX1)
                                    from    POLINE
                                    where   PONUM = &ponumins1)
        where ponum = &ponumins1;
    End-Sql

End-Procedure   ! Update

!--------------------------------------------------------
! PrintPO
!--------------------------------------------------------
Begin-Procedure PrintPO
    Alter-Printer Font = {Arial} Point-Size = 7
    Print $itemnum                         (+1,1)
    Print $itemdesc                        (,10,33)

    If $reportformat = 'H'
        Print $inspectionrequired           (,33)
    Else
        Print $in19                         (,33)
    End-If

    Print #orderqty                         (,44)  edit 999999.99
    Print #lastcost                         (,51)  edit 99999999.99
    Let #wvalue = #orderqty * #lastcost

    Print #wvalue                           (,57)  edit 99999999.99
    Print $lastpodate                       (,66) edit DD-MON-YY
    Print $Vendor                           (,72)
    Print $respasSet                        (,82)                  ! was respperson

    If $reportformat = 'H'
        Print $panum                           (,83)
    Else
        Print #fcurbal                         (,77) edit 999999
    End-If

    Print $orderapproval                   (,87)
    Print &lastissuedate                   (,91) edit DD-MON-YY
    Print $prnumins                        (,98)
    Print $criticality                     (,108)
    add 1 to #records
    add #orderqty to #totqty
    add #wvalue to #totvalue
End-Procedure   ! PrintPO

!--------------------------------------------------------
! Print_NotOrdered
!--------------------------------------------------------
Begin-Procedure Print_NotOrdered
    Alter-Printer Font = {Arial} Point-Size = 7
    Print $itemnum                         (+1,1)
    Print $itemdesc                       (,10,35)
    Print $in19                (,37)
    Print #orderqty                        (,44)  edit 99999999.99
    Print #lastcost                        (,50)  edit 99999999.99
    Let #wvalue = #orderqty * #lastcost
    Print #wvalue                          (,58)  edit 99999999.99
    Print $lastpodate                      (,69)  edit DD-MON-YY
    Print $Vendor                          (,73)
    Print $respasSet         (,85)
    If $reportformat = 'H'
        Print $panum                           (,80)
    Else
        Print #fcurbal                         (,80) edit 999999
    End-If
    Print 'Exchange rate expired'          (,93)
    Print $exchangedate                    (,107)
    add 1 to #records
    add #orderqty to #totqty
    add #wvalue to #totvalue
End-Procedure   ! Print_NotOrdered

!--------------------------------------------------------
! Footing - Footer section of the report
!--------------------------------------------------------
Begin-Footing 3
    graphic                                (+1,1,110) horz-line
    Print 'Report Name - '                 (+1,1) BOLD
    Print {repname}                        (,10)
    Alter-Printer Font = {Arial} Point-Size = 7
    Print 'Page - '                        (,55)
    Page-Number                            (,59)
    Print 'of '                            (,61)
    last-page                              (,63)
End-Footing

!--------------------------------------------------------
! Check_PR - Checks If the items retieved are already on Purchase Request - Not Used
!--------------------------------------------------------
Begin-Procedure Check_PR
    move 0 to #prexists
    Begin-Select
                PRNUM &dprnum
        move 1 to #prexists
        from    PRLINE,
                PR
        where   PRLINE.ITEMNUM = $itemnum
        and     PR.PRNUM = PRLINE.PRNUM
        and     PR.STATUS in (  select VALUE
                                from    VALUELIST
                                where   LISTNAME = 'PRSTATUS'
                                and     MAXVALUE in ('WAPPR','APPR'))
        and     PRLINE.PONUM is null
    End-Select
End-Procedure

!--------------------------------------------------------
! Check_PO - Checks If the items retrieved are already on Purchase Order - not used
!--------------------------------------------------------
Begin-Procedure Check_PO
    move 0 to #poexists
    Begin-Select
                POLINE.PONUM                            &ponumis
        move 1 to #poexists
        from    POLINE ,
                PO
        where   PO.PONUM = POLINE.PONUM
        and     POLINE.ITEMNUM = $itemnum
        and     PO.POTYPE <> 'PRICE'
        and     POLINE.RECEIVEDQTY < POLINE.ORDERQTY
    End-Select
End-Procedure

!--------------------------------------------------------
! SQL_Error - Print the error Position & Oracle SQL error, Then Stop the report.
!--------------------------------------------------------
Begin-Procedure SQL_Error
    Print $errplace      (+2,1)
    Print $sql-error     (+3,5)
    Print $Vendor         (+1,5)
    Print $LastVendor  (+1,5)
    Stop quiet
End-Procedure

!--------------------------------------------------------
! LDKEY_Get - Get the ldkey
!--------------------------------------------------------
Begin-Procedure LDKEY_Get
    Begin-Select
                MAX(LDKEY)+1      &PLDKEY / #PLDKEY
        from    LONGDESCRIPTION
                [$PTABLE]                           ! WHERE LDOWNERTABLE = PRLINE
        and     LDKEY BETWEEN #VLOW and &THERANGE
    End-Select
End-Procedure

!--------------------------------------------------------
! Supervisor_Get
!--------------------------------------------------------
Begin-Procedure Supervisor_Get
    Begin-Select
                IECONTACT    &supervisor
        move &supervisor to $supervisor
        from    BPRASSET
        where   RESASSET = $respasset
    End-Select
End-Procedure   ! Supervisor_Get

!--------------------------------------------------------
! PutIntoWorkflow - adds each PR created into workflow. - Not used??
!--------------------------------------------------------
Begin-Procedure PutIntoWorkflow
    Let #count=0
    While 1=1
        get $prWF from pr_array(#count) prnum
        If $prWF = '' or #count=199
            Break
        End-If
        Begin-Select
            STATUS  &PR_WF_STATUS
            move &PR_WF_STATUS TO $PR_WF_STATUS
            from PR
            where PRNUM = $PRWF
        End-Select
        If $PR_WF_STATUS = 'WAPPR'
            Do AddPRToWorkflow
        End-If
        Let #count=#count+1
    End-While
End-Procedure

!--------------------------------------------------------
!-- AddPRToWorkflow
!--------------------------------------------------------
Begin-Procedure AddPRToWorkflow
    Begin-Select  varvalue    &pr_wf_revision
        move &pr_wf_revision to #pr_wf_revision
        from  MAXVARS
        where VARNAME = 'PR_WF_REVISION'
    End-Select

    Begin-Select
        varvalue    &pr_wf_nodeid
        move &pr_wf_nodeid to #pr_wf_nodeid
        from  MAXVARS
        where VARNAME = 'PR_WF_NODEID'
    End-Select

    Begin-Select
        VARVALUE    &pr_wf_processid
        move &pr_wf_processid to #pr_wf_processid
        from  MAXVARS
        where VARNAME = 'PR_WF_PROCESSID'
    End-Select

    Begin-Select
        Max(WFID)+1 &WFID
        move &WFID to #WFID
        from  WFINSTANCE
    End-Select

    Begin-Sql
        Update PR Set WFACTIVE = 'Y' where PRNUM = $prWF
    End-Sql

    Begin-Sql
        Update PR Set WFID=#WFID where PRNUM = $prWF
    End-Sql


    Begin-Sql
        insert into WFINSTANCE (WFID,RECORDKEY,ORIGINATOR,MAINTBNAME,REVISION,STARTTIME,CURRTASKSTARTTIME,ACTIVE)
        values (#WFID,$prWF,'MAXIMO','PR',#pr_wf_revision,SYSDATE,SYSDATE,'Y');
    End-Sql

    Begin-Sql
        insert into WFCALLSTACK (WFID,NODEID,PROCESSID,CALLSEQ,ACTIVE,PROCESSREV) VALUES  (#WFID,#pr_wf_nodeid,#pr_wf_processid,0,'Y',#pr_wf_revision);
    End-Sql

    Begin-Sql
        insert into WFASSIGNMENT(ASSIGNID,DESCRIPTION,ASSIGNTYPE,ASSIGNCODE,APP, TIMELIMIT, STARTDATE, DUEDATE, EMAILNOTIFICATION, ASSIGNSTATUS, PROCESSNAME, PROCESSID, PROCESSTYPE, RECORDKEY, WFID, NODEID, PROCESSREV)
        values (#WFID+1,'Auto accept task','OTHER','AUTOACPT','PR','.0166', SYSDATE, SYSDATE+0.001, 'N', 'ACTIVE', 'PR', #pr_wf_processid, 'PR', $PRWF, #WFID, #pr_wf_nodeid , #pr_wf_revision);
    End-Sql


    Print 'PR ' (+1,1)
    Print $prWF (,10)
    Print 'added to workflow' (,40)

End-Procedure

!--------------------------------------------------------
! MinValPR
!--------------------------------------------------------
Begin-Procedure MinValPR
    Let $minvalpr = 'NONE'
    Begin-Select
        PRNUM   &minvalpr  $minvalpr
        from    PR
        where   VENDOR = $Vendor
        and     STATUS = 'MINVAL'
    End-Select
End-Procedure   ! MinvalPO

!--------------------------------------------------------
! Update_MinVal_Line - If the item already exist on the pr then add it to the same line (increase qty) otherwise add new line
!--------------------------------------------------------
Begin-Procedure Update_MinVal_Line
    Let $insertNewLine = ''
    Let #linenumx=0

    Begin-Select
                PRLINENUM   &linenumx       / #linenumx
                ORDERQTY    #orderqtyx      / &orderqtyx
                LINECOST    &linecostx      / #linecostx
                TAX1        &tax1x          / #tax1x
                LOADEDCOST  &loadedcostx    / #loadedcostx
        from    PRLINE
        where   PRNUM = $prnumins
        and     ITEMNUM = $itemnum
    End-Select

    If #linenumx>0
        Let #new_orderqty=#orderqtyx+#orderqty_converted
        Let #new_linecost=#linecostx+(#lastcost*#orderqty)
        Let #new_tax1=#tax1x+#tax1
        Let #new_loadedcost=#loadedcostx+(#lastcost*#orderqty_converted)

        Begin-Sql
            Update PRLINE
            Set     ORDERQTY    = #new_orderqty,
                    LINECOST    = #new_linecost,
                    TAX1        = #new_tax1,
                    LOADEDCOST  = #new_loadedcost
            where   PRNUM       = $prnumins
            and     PRLINENUM   = #linenumx
        End-Sql
        Let $insertNewLine = 'N'
    Else
        Let $insertNewLine = 'Y'
    End-If

    Do CalcTotalCost

    Begin-Sql on-error=SQL_Error
        Update PR Set TOTALCOST = #PRtotalcost where PRNUM = $prnumins;
        Update PR Set CHANGEDATE = SYSDATE where PRNUM = $prnumins;
    End-Sql

    Do PrintPO
    Let $Printedalready = 'Y'

End-Procedure

!--------------------------------------------------------
!-- CalcTotalCost - Totalcost should be the sum of the linecost and the tax
!--------------------------------------------------------
Begin-Procedure CalcTotalCost
    Begin-Select
                Sum(LINECOST)   linecostsum
                Sum(TAX1)       tax1sum
        from    PRLINE
        where   PRNUM = $prnumins
    End-Select

    Let #PRTotalcost=#linecostsum+#tax1sum

End-Procedure

!--------------------------------------------------------
! GetNextPRLine
!--------------------------------------------------------
Begin-Procedure GetNextPRLine
    Begin-Select
                Max(PRLINENUM) maxprlinenum+1
        from    PRLINE
        where   PRNUM = $minvalpr
    End-Select
End-Procedure   ! GetNextPRLine

!--------------------------------------------------------
! GetNextPRLine-Normal
!--------------------------------------------------------
Begin-Procedure GetNextPRLine-Normal
    Begin-Select
                Max(PRLINENUM) &maxprlinenum-x+1
        from    PRLINE
        where   PRNUM = $prnumins
    End-Select
End-Procedure   ! GetNextPRLine-Normal

!--------------------------------------------------------
! CalculateStatus
!--------------------------------------------------------
Begin-Procedure CalculateStatus
    move 0 to #PRtotcost                                                    ! On Finishing adding PO lines for Vendor
    move 0 to #prminval
    If $minvalenabled = 'Y'                                                 ! Get PO total value / Get PO Vendor Minimum Value
        Begin-Select
                    PR.TOTALCOST    prtotcost
                    PR.STATUS       curprstatus
                    CX.POMINVAL     prminval
            from    PR PR, COMPANYX CX
            where   PR.VENDOR = cx.COMPANY (+)
            and     PR.PRNUM = $lastprnumins
        End-Select

        If #prtotcost < #prminval                                           ! If PR Total value less than PR Vendor Minimum Value
            Do UpdatePrStatus($lastprnumins,'MINVAL')
        Else                                                                ! The Minval PO will now be Set to WAPPR) Set all required by dates to the maximo required by Date.
            Do UpdateRequiredDates
            Do AddStatus
            put $lastprnumins into pr_array(#arraycount) prnum              ! Puts the prnum into the array so it will be added to Workflow.
            Let #arraycount=#arraycount+1

        End-If
    Else
        Do AddStatus

    End-If

End-Procedure   !CalculateStatus

!--------------------------------------------------------
! UpdatePRStatus - If approving the order then check that the Vendor is not disqualified....
!--------------------------------------------------------
Begin-Procedure UpdatePRStatus($prnum,$status)

    If $status = 'EMAIL' or $status = 'FAX'
        Begin-Select
                    VENDOR          curvEnd
            from    PR
            where   PRNUM = $prnum
        End-Select

        Begin-Select
                    DISABLED    &disable / $disable
            from    COMPANIES
            where   COMPANY = $curvEnd
        End-Select

        If $disable = 'Y'
            Print 'PR cannot be approved. Vendor is disqualified.' (+1,5)
            Let $status = 'WAPPR'
        End-If

    End-If

    Let $addstatus = ''''||$status||''''
    Let $prnum = ''''||$prnum||''''
    Let $changeby = ''''|| $_username ||''''

    Begin-Sql on-error=SQL_Error
        Update  PR Set  STATUS = [$addstatus],
                        STATUSDATE = SYSDATE
        where   PRNUM = [$prnum];        ! Added RCooke.
    End-Sql

    Begin-Sql on-error=SQL_Error
        insert into PRSTATUS (  PRNUM,
                                STATUS,
                                CHANGEBY,
                                CHANGEDATE,
                                MEMO)
        values              (   [$prnum],
                                [$addstatus],
                                [$changeby],
                                SYSDATE,
                                'AUTO REORDER')
    End-Sql

    If $status = 'EMAIL' or $status = 'FAX'
        Begin-Sql
            update  PR
            set     ORDERDATE = SYSDATE
            where   PRNUM = [$prnum];
        End-Sql



    End-If

    Do EndLines ($prnum,$status)

End-Procedure

!--------------------------------------------------------
! EndLines
!--------------------------------------------------------
Begin-Procedure EndLines ($prnum,$status)
    If #PRTOTCOST = 0 and $status = 'WAPPR'
    Else
        Print {Statusset} (+1,5)
        Print ' ' (,+1)
        Print $status (,+1)
    End-If
    If $status <> 'MINVAL' and $_curpostatus = 'MINVAL'
        Print {MinvalMsg} (+1,5)
    End-If
End-Procedure

!--------------------------------------------------------
! UpdateRequiredDates
!--------------------------------------------------------
Begin-Procedure UpdateRequiredDates
    Begin-Select
                min(REQDELIVERYDATE)        minreqdeliverydateMinval
        from    PRLINE
        where   PRNUM = $lastprnumins
    End-Select

    Begin-Sql
        update  PRLINE
        set     REQDELIVERYDATE = $minreqdeliverydateMinval
        where   PRNUM = $lastprnumins;

        update  PR
        set     REQUIREDDATE = $minreqdeliverydateMinval
        where   PRNUM = $lastprnumins;
    End-Sql

End-Procedure

!--------------------------------------------------------
! Changes the PR to status = 'WAPPR'
!--------------------------------------------------------
Begin-Procedure AddStatus
    Do UpdatePRStatus($lastprnumins,'WAPPR')
End-Procedure

!--------------------------------------------------------
! GetDllFlagsValues
!--------------------------------------------------------
Begin-Procedure GetDllFlagsValues
    Do debug('GETDLLFLAGSVALUES')
    Begin-Select
                ENABLE minvalenabled
        from    BPDLLFC
        where   FUNCTIONID = 201
    End-Select
End-Procedure
